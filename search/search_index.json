{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"body{ background: rgb(0,68,68); background: linear-gradient(180deg, rgba(0,68,68,1) 8%, rgba(22,102,39,1) 100%); } /*Hide footer*/ .md-footer { display:none; } .md-content__inner { //display:none; } /* Application header should be static for the landing page */ .md-header { position: initial; background-color: #00444400; } /* Remove spacing, as we cannot hide it completely */ .md-main__inner { margin: 0; } .md-tabs { background-color: #00444400; } /* Hide table of contents */ @media screen and (min-width: 60em) { .md-sidebar--secondary { display: none; } } /* Hide navigation */ @media screen and (min-width: 76.25em) { .md-sidebar--primary { display: none; } } @media screen and (max-width: 567px){ .tx-hero { padding-bottom: 6rem !important; width: 95% !important; margin-top: 0rem !important; margin-left: 0rem !important; height: 10rem; } } @media screen and (max-width: 360px){ .md-typeset .md-button { margin-bottom: 0.5rem; width: 62%; } .md-typeset h1 { font-size: 1.4rem; } } @media screen and (max-width: 286px){ .md-header-nav__title { display: none !important; } } @media screen and (min-width: 60em) .tx-hero { max-width: 19rem; margin-top: 3.5rem; padding-bottom: 14vw; } .tx-hero { padding-bottom: 6rem; width: 55%; margin-top: 3rem; margin-left: 3rem; } .flex-container { display: flex; flex-flow: row wrap; background-color: DodgerBlue; } .flex-container > div { background-color: #f1f1f1; width: 100px; margin: 10px; text-align: center; line-height: 75px; font-size: 30px; } html, body { margin 0; padding: 0; } .background { position: absolute; top: 0; bottom: 0; left: 0; right: 0; z-index: -1; } .md-announce { background-color: hsl(0deg 0% 0% / 16%); } .md-typeset h1 { color: hsl(0deg 0% 100%); font-weight: 900; } .md-typeset .md-button:focus, .md-typeset .md-button:hover { background-color: hsl(180deg 100% 11%); } .start:hover { background-color: hsl(180deg 100% 11%) !important; color: white !important; } One assessment method to rule them all The ITL performance system can help you create a science-backed-up methodology approach to measure and grade your business system performance. Get started Go to GitHub","title":"ITL Documentation"},{"location":"diagram/","text":"Block Diagram Internal Organization The following block diagram shows the ITL internal organization:","title":"Block diagram"},{"location":"diagram/#block-diagram","text":"","title":"Block Diagram"},{"location":"diagram/#internal-organization","text":"The following block diagram shows the ITL internal organization:","title":"Internal Organization"},{"location":"fuzzy-intro/","text":"What are fuzzy sets? Classical sets vs fuzzy sets Fuzzy logic is a mathematical theory model made to bridge the gap between humans and computers. Computers think about things in a mathematical and logical manner, but human beings do not. We are prone to ambiguity, so this theory allows computers to think ambiguously as well. Human ambiguity If we want an example of what exactly a fuzzy set looks like, we could conduct survey and gather data. Let's say we want to know what middle-aged means. If we asked 100 people when middle age starts and ends, we might end up with a definite majority, the prevalent opinion being that middle age starts at 35 and ends at 55. Therefore, we could say that people aged between 35 and 55 are considered to be middle-aged. The classical set theory cannot process this kind of information. However, in a fuzzy set world, this is a piece of cake.","title":"What are fuzzy sets?"},{"location":"fuzzy-intro/#what-are-fuzzy-sets","text":"","title":"What are fuzzy sets?"},{"location":"fuzzy-intro/#classical-sets-vs-fuzzy-sets","text":"Fuzzy logic is a mathematical theory model made to bridge the gap between humans and computers. Computers think about things in a mathematical and logical manner, but human beings do not. We are prone to ambiguity, so this theory allows computers to think ambiguously as well.","title":"Classical sets vs fuzzy sets"},{"location":"fuzzy-intro/#human-ambiguity","text":"If we want an example of what exactly a fuzzy set looks like, we could conduct survey and gather data. Let's say we want to know what middle-aged means. If we asked 100 people when middle age starts and ends, we might end up with a definite majority, the prevalent opinion being that middle age starts at 35 and ends at 55. Therefore, we could say that people aged between 35 and 55 are considered to be middle-aged. The classical set theory cannot process this kind of information. However, in a fuzzy set world, this is a piece of cake.","title":"Human ambiguity"},{"location":"fuzzy-mes-par/","text":"Choosing measurement parameters This documentation section will be available soon.","title":"Choosing measurement parameters"},{"location":"fuzzy-mes-par/#choosing-measurement-parameters","text":"This documentation section will be available soon.","title":"Choosing measurement parameters"},{"location":"fuzzy-radar/","text":"Radar Charts This documentation section will be available soon.","title":"Radar charts"},{"location":"fuzzy-radar/#radar-charts","text":"This documentation section will be available soon.","title":"Radar Charts"},{"location":"fuzzy/","text":"Fuzzy membership functions How do we define them? The fuzzy membership functions compute the element's degree of the membership to a given fuzzy set. This measurement is numerically presented as the value between 0 and 1. Supported functions At the moment, the ITL supports six different types of the fuzzy membership functions. The linear membership function is often used and IDL has an ability to automatically recognize the type of the linear fuzzy function based on provided parameters. Five other supported functions include Trapezoidal, Triangular, Gauss, Gauss2 and Sigmoidal fuzzy membership functions. Rising slope \u2014 type 1 This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } a_i < v_i < b_i \\\\ 1,& \\text{ if } v_i \\geq b_i \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the lower limit of the worst metric value, \\(b_i\\) - is the starting point of best metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. The following graph represents an example of the rising slope fuzzy function: Note how the function starts rising after value of 100 (so the parameter a here equals 100) and has an linear increasing value up to 400. After this point the grade (y-axis) has the constant value of 1.0 (so the parameter b here equals to 400). Falling slope \u2014 type 2 This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ 1-\\frac{v_i-a_i}{b_i-a_i},& \\text{ if } a_i < v_i < b_i \\\\ 0,& \\text{ if } v_i \\geq b_i \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the upper limit of the best metric value, \\(b_i\\) - is the starting point of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. The following graph represents an example of the falling slope fuzzy function: Note how the function immediately starts falling until value of 5 (so the parameter a here equals 0) After this point the grade (y-axis) has the constant value of 0.0 (so the parameter b here equals to 5). Trapezoidal Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } v_i \\in [a_i,b_i) \\\\ 1,& \\text{ if } v_i \\in [b_i,c_i] \\\\ \\frac{v_i-d_i}{c_i-d_i},& \\text{ if } v_i \\in (c_i,d_i] \\\\ 0,& \\text{ if } v_i > d_i \\\\ \\end{cases}\\) \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the worst metric value, \\(b_i\\) - is the starting point of the best metric value, \\(c_i\\) - is the ending point of the best metric value, \\(d_i\\) - is the right lower limit of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) -th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-b_i}{a_i-b_i},& \\text{ if } v_i \\in (a_i,b_i] \\\\ 0,& \\text{ if } v_i \\in (b_i,c_i) \\\\ \\frac{v_i-c_i}{d_i-c_i},& \\text{ if } v_i \\in [c_i,d_i) \\\\ 1,& \\text{ if } v_i \\ge d_i \\\\ \\end{cases}\\) \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the best metric value, \\(b_i\\) - is the starting point of the worst metric value, \\(c_i\\) - is the ending point of the worst metric value, \\(d_i\\) - is the right lower limit of the best metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) -th metric\u2019s grade between 0 and 1. Triangular Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i < a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } v_i \\in [a_i,b_i) \\\\ 1,& \\text { if } v_i = b_i \\\\ \\frac{c_i-v_i}{c_i-b_i},& \\text{ if } v_i \\in (b_i,c_i] \\\\ 0,& \\text{ if } v_i > c_i \\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the worst metric value, \\(b_i\\) - is the best metric value point, \\(c_i\\) - is the lower limit of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ \\frac{b_i-v_i}{b_i-a_i},& \\text{ if } v_i \\in (a_i,b_i) \\\\ 0,& \\text { if } v_i = b_i \\\\ \\frac{v_i-b_i}{c_i-b_i},& \\text{ if } v_i \\in (b_i,c_i) \\\\ 1,& \\text{ if } v_i \\geq c_i \\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the best metric value, \\(b_i\\) - is the worst metric value point, \\(c_i\\) - is the right lower limit of the best metric value \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Gaussian Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 1, &\\text { if } v_i = \\mu_i\\\\ {e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_i\\) - is the best value metric point , \\(\\sigma_i\\) - is the standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 0, &\\text { if } v_i = \\mu_i\\\\ {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_i\\) - is the worst value metric point, \\(\\sigma_i\\) - is the standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Gaussian 2 (combined) Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {e^{-(\\frac{v_i-\\mu_{1_i}}{\\sigma_{1_i}})}}^2, &\\text { if } v_i \\in [\\mu_{1_i}-6\\cdot \\sigma_{1_i})\\\\ 1, &\\text { if } v_i \\in [\\mu_{1_i}, \\mu_{2_i}]\\\\ {e^{-(\\frac{v_i-\\mu_{2_i}}{\\sigma_{2_i}})}}^2, &\\text { if } v_i \\in [\\mu_{2_i}+6\\cdot \\sigma_{2_i})\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_{1_i}\\) - is the best metric starting point, \\(\\mu_{2_i}\\) - is the best metric ending point, \\(\\sigma_{1_i}\\) - is the first distribution standard deviation, \\(\\sigma_{2_i}\\) - is the second distribution standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 0, &\\text { if } v_i = \\mu_i\\\\ {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_{1_i}\\) - is the left upper limit of the best metric, \\(\\mu_{2_i}\\) - is the right limit of thr best metric, \\(\\sigma_{1_i}\\) - is the first distribution standard deviation, \\(\\sigma_{2_i}\\) - is the second distribution standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Sigmoidal Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i) = \\frac{1}{1+e^{-b_i \\cdot (v_i-a_i)}}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the center value of sigmoid where it equals 0.5, \\(b_i\\) - is the width of sigmoidal region about \\(a_i\\) , \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i) = 1-\\frac{1}{1+e^{-b_i \\cdot (v_i-a_i)}}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the center value of sigmoid where it equals 0.5, \\(b_i\\) - is the width of sigmoidal region about \\(a_i\\) , \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1.","title":"Fuzzy membership functions"},{"location":"fuzzy/#fuzzy-membership-functions","text":"","title":"Fuzzy membership functions"},{"location":"fuzzy/#how-do-we-define-them","text":"The fuzzy membership functions compute the element's degree of the membership to a given fuzzy set. This measurement is numerically presented as the value between 0 and 1.","title":"How do we define them?"},{"location":"fuzzy/#supported-functions","text":"At the moment, the ITL supports six different types of the fuzzy membership functions. The linear membership function is often used and IDL has an ability to automatically recognize the type of the linear fuzzy function based on provided parameters. Five other supported functions include Trapezoidal, Triangular, Gauss, Gauss2 and Sigmoidal fuzzy membership functions.","title":"Supported functions"},{"location":"fuzzy/#rising-slope-type-1","text":"This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } a_i < v_i < b_i \\\\ 1,& \\text{ if } v_i \\geq b_i \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the lower limit of the worst metric value, \\(b_i\\) - is the starting point of best metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. The following graph represents an example of the rising slope fuzzy function: Note how the function starts rising after value of 100 (so the parameter a here equals 100) and has an linear increasing value up to 400. After this point the grade (y-axis) has the constant value of 1.0 (so the parameter b here equals to 400).","title":"Rising slope \u2014 type 1"},{"location":"fuzzy/#falling-slope-type-2","text":"This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ 1-\\frac{v_i-a_i}{b_i-a_i},& \\text{ if } a_i < v_i < b_i \\\\ 0,& \\text{ if } v_i \\geq b_i \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the upper limit of the best metric value, \\(b_i\\) - is the starting point of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. The following graph represents an example of the falling slope fuzzy function: Note how the function immediately starts falling until value of 5 (so the parameter a here equals 0) After this point the grade (y-axis) has the constant value of 0.0 (so the parameter b here equals to 5).","title":"Falling slope \u2014 type 2"},{"location":"fuzzy/#trapezoidal","text":"Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } v_i \\in [a_i,b_i) \\\\ 1,& \\text{ if } v_i \\in [b_i,c_i] \\\\ \\frac{v_i-d_i}{c_i-d_i},& \\text{ if } v_i \\in (c_i,d_i] \\\\ 0,& \\text{ if } v_i > d_i \\\\ \\end{cases}\\) \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the worst metric value, \\(b_i\\) - is the starting point of the best metric value, \\(c_i\\) - is the ending point of the best metric value, \\(d_i\\) - is the right lower limit of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) -th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ \\frac{v_i-b_i}{a_i-b_i},& \\text{ if } v_i \\in (a_i,b_i] \\\\ 0,& \\text{ if } v_i \\in (b_i,c_i) \\\\ \\frac{v_i-c_i}{d_i-c_i},& \\text{ if } v_i \\in [c_i,d_i) \\\\ 1,& \\text{ if } v_i \\ge d_i \\\\ \\end{cases}\\) \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the best metric value, \\(b_i\\) - is the starting point of the worst metric value, \\(c_i\\) - is the ending point of the worst metric value, \\(d_i\\) - is the right lower limit of the best metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) -th metric\u2019s grade between 0 and 1.","title":"Trapezoidal"},{"location":"fuzzy/#triangular","text":"Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 0,& \\text{ if } v_i < a_i \\\\ \\frac{v_i-a_i}{b_i-a_i},& \\text{ if } v_i \\in [a_i,b_i) \\\\ 1,& \\text { if } v_i = b_i \\\\ \\frac{c_i-v_i}{c_i-b_i},& \\text{ if } v_i \\in (b_i,c_i] \\\\ 0,& \\text{ if } v_i > c_i \\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the worst metric value, \\(b_i\\) - is the best metric value point, \\(c_i\\) - is the lower limit of the worst metric value, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} 1,& \\text{ if } v_i \\leq a_i \\\\ \\frac{b_i-v_i}{b_i-a_i},& \\text{ if } v_i \\in (a_i,b_i) \\\\ 0,& \\text { if } v_i = b_i \\\\ \\frac{v_i-b_i}{c_i-b_i},& \\text{ if } v_i \\in (b_i,c_i) \\\\ 1,& \\text{ if } v_i \\geq c_i \\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the left upper limit of the best metric value, \\(b_i\\) - is the worst metric value point, \\(c_i\\) - is the right lower limit of the best metric value \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1.","title":"Triangular"},{"location":"fuzzy/#gaussian","text":"Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 1, &\\text { if } v_i = \\mu_i\\\\ {e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_i\\) - is the best value metric point , \\(\\sigma_i\\) - is the standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 0, &\\text { if } v_i = \\mu_i\\\\ {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_i\\) - is the worst value metric point, \\(\\sigma_i\\) - is the standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1.","title":"Gaussian"},{"location":"fuzzy/#gaussian-2-combined","text":"Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {e^{-(\\frac{v_i-\\mu_{1_i}}{\\sigma_{1_i}})}}^2, &\\text { if } v_i \\in [\\mu_{1_i}-6\\cdot \\sigma_{1_i})\\\\ 1, &\\text { if } v_i \\in [\\mu_{1_i}, \\mu_{2_i}]\\\\ {e^{-(\\frac{v_i-\\mu_{2_i}}{\\sigma_{2_i}})}}^2, &\\text { if } v_i \\in [\\mu_{2_i}+6\\cdot \\sigma_{2_i})\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_{1_i}\\) - is the best metric starting point, \\(\\mu_{2_i}\\) - is the best metric ending point, \\(\\sigma_{1_i}\\) - is the first distribution standard deviation, \\(\\sigma_{2_i}\\) - is the second distribution standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i)= \\begin{cases} {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i-6\\cdot \\sigma_i)\\\\ 0, &\\text { if } v_i = \\mu_i\\\\ {1-e^{-(\\frac{v_i-\\mu_i}{\\sigma_i})}}^2, &\\text { if } v_i \\in [\\mu_i+6\\cdot \\sigma_i)\\\\ \\end{cases}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(\\mu_{1_i}\\) - is the left upper limit of the best metric, \\(\\mu_{2_i}\\) - is the right limit of thr best metric, \\(\\sigma_{1_i}\\) - is the first distribution standard deviation, \\(\\sigma_{2_i}\\) - is the second distribution standard deviation, \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1.","title":"Gaussian 2 (combined)"},{"location":"fuzzy/#sigmoidal","text":"Experimental Positive This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i) = \\frac{1}{1+e^{-b_i \\cdot (v_i-a_i)}}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the center value of sigmoid where it equals 0.5, \\(b_i\\) - is the width of sigmoidal region about \\(a_i\\) , \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1. Negative This fuzzy membership function can be defined as: \\(\\mu_{F_i}(v_i) = 1-\\frac{1}{1+e^{-b_i \\cdot (v_i-a_i)}}\\) where: \\(v_i\\) - is the measured value to be assessed, \\(a_i\\) - is the center value of sigmoid where it equals 0.5, \\(b_i\\) - is the width of sigmoidal region about \\(a_i\\) , \\(\\mu_{F_i}(v_i)\\) - is the \\(i\\) \u2212th metric\u2019s grade between 0 and 1.","title":"Sigmoidal"},{"location":"grammar/","text":"Grammar Grammar The following excerpt shows the grammar of ITL. For interpreting entered syntax by this definition, Lark parser was used. start: instruction+ instruction: \"assessment\" STRING code_block -> pocetak_izvestaja | \"metrics\" NAME \"{\" dict_item* \"}\" -> skup_metrika | \"grade\" NAME \";\" -> oceni_metrike | \"grade cumulative\" NAME \",\" NAME (\",\" NAME)* \";\" -> oceni_metrike_z | \"grade comparative\" NAME \",\" NAME\";\" -> oceni_metrike_u | \"grade singular\" NAME (\",\" NAME)* \";\" -> oceni_metrike_p | \"print\" NAME (\",\" NAME)* \";\" -> ispisi_metrike | \"make excel report\" STRING \";\" -> pravi_izvestaj | \"draw metric\" NAME (\",\" NAME)* \"from\" set -> nacrtaj_metriku code_block: \"{\" instruction+ \"}\" -> blok_naredbi dict_item: NAME \"=\" dict_subitem -> naziv_metrike dict_subitem: \"(\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_lin | \"trapezoid(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_tra | \"triangle(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_tri | \"gauss(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_gau | \"gauss2(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_gau2 | \"sigmoid(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_sig set: NAME \";\" -> from COMMENT : /#.*/ %import common.CNAME -> NAME %import common.NUMBER -> NUMBER %import common.ESCAPED_STRING -> STRING %import common.WS %ignore WS %ignore COMMENT","title":"Grammar"},{"location":"grammar/#grammar","text":"","title":"Grammar"},{"location":"grammar/#grammar_1","text":"The following excerpt shows the grammar of ITL. For interpreting entered syntax by this definition, Lark parser was used. start: instruction+ instruction: \"assessment\" STRING code_block -> pocetak_izvestaja | \"metrics\" NAME \"{\" dict_item* \"}\" -> skup_metrika | \"grade\" NAME \";\" -> oceni_metrike | \"grade cumulative\" NAME \",\" NAME (\",\" NAME)* \";\" -> oceni_metrike_z | \"grade comparative\" NAME \",\" NAME\";\" -> oceni_metrike_u | \"grade singular\" NAME (\",\" NAME)* \";\" -> oceni_metrike_p | \"print\" NAME (\",\" NAME)* \";\" -> ispisi_metrike | \"make excel report\" STRING \";\" -> pravi_izvestaj | \"draw metric\" NAME (\",\" NAME)* \"from\" set -> nacrtaj_metriku code_block: \"{\" instruction+ \"}\" -> blok_naredbi dict_item: NAME \"=\" dict_subitem -> naziv_metrike dict_subitem: \"(\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_lin | \"trapezoid(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_tra | \"triangle(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_tri | \"gauss(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_gau | \"gauss2(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_gau2 | \"sigmoid(\" STRING? \",\"? NUMBER \",\" NUMBER \",\" NUMBER \")\" -> par_mer_sig set: NAME \";\" -> from COMMENT : /#.*/ %import common.CNAME -> NAME %import common.NUMBER -> NUMBER %import common.ESCAPED_STRING -> STRING %import common.WS %ignore WS %ignore COMMENT","title":"Grammar"},{"location":"ide-as-res/","text":"Understanding assessment results This documentation section will be available soon.","title":"Understanding the assessment results"},{"location":"ide-as-res/#understanding-assessment-results","text":"This documentation section will be available soon.","title":"Understanding assessment results"},{"location":"ide-excel/","text":"Creating the Excel report Example code for report generating assessment \"June Performance Assessment Report - E-bank Group\" { metrics E_bank_1 { Compl = gauss2(2.4,6,3,8,3) New_Credit_Cards = (218,100,400) Screen_Time = trapezoid(\"-\",4,1,5,10,16) New_Loans = sigmoid(\"-\",2.3,6.2,8.4) Loan_Lead_Time = (4.43,30,15) } metrics E_bank_2 { Compl = gauss2(3.5,6,3,8,3) New_Credit_Cards = (295,100,400) Screen_Time = triangle(4.9,1,5,15) New_Loans = sigmoid(\"-\",7.3,6.2,8.4) Loan_Lead_Time = (8.82,30,15) } metrics E_bank_3 { Compl = gauss(1.2,6,3) New_Credit_Cards = (191,100,400) Screen_Time = triangle(9.5,1,5,15) New_Loans = sigmoid(\"-\",7.3,6.2,8.4) Loan_Lead_Time = (2.52,30,15) } grade cumulative E_bank_1, E_bank_2, E_bank_3; grade singular E_bank_1, E_bank_2, E_bank_3; grade comparative E_bank_1, E_bank_2; print E_bank_1, E_bank_2, E_bank_3; make excel report \"Excel_Tutorial\"; } Structure of the generated Excel report List of the all assessment metrics # Set Name Type Sign Param v Param a Param b Param c Param d 0 E_bank_1 Compl Gaussian type 2 + 2.4 6 3 8 3 1 E_bank_1 New_Credit_Cards Linear + 218 100 400 / / 2 E_bank_1 Screen_Time Trapezoidal - 4 1 5 10 16 3 E_bank_1 New_Loans Sigmoidal - 2.3 6.2 8.4 / / 4 E_bank_1 Loan_Lead_Time Linear + 4.43 30 15 / / ... ... ... ... ... ... ... ... ... ... 12 E_bank_3 Screen_Time Triangular + 9.5 1 5 15 / 13 E_bank_3 New_Loans Sigmoidal - 7.3 6.2 8.4 / / 14 E_bank_3 Loan_Lead_Time Linear + 2.52 30 15 / / List of the individual grades # Metric Grade Max grade 0 E_bank_1 70 100 1 E_bank_2 41 100 2 E_bank_3 83 100 List containing the comaprative grades # Metric Grade Max grade 0 E_bank_1 57 100 1 E_bank_2 55 100 List containing the cumultive grade # Metric Grade Max grade 0 E_bank_1 1 E_bank_2 2 E_bank_3 3 50 100 Example Excel report You can download the example Excel report from this tutorial here.","title":"Creating the Excel report"},{"location":"ide-excel/#creating-the-excel-report","text":"","title":"Creating the Excel report"},{"location":"ide-excel/#example-code-for-report-generating","text":"assessment \"June Performance Assessment Report - E-bank Group\" { metrics E_bank_1 { Compl = gauss2(2.4,6,3,8,3) New_Credit_Cards = (218,100,400) Screen_Time = trapezoid(\"-\",4,1,5,10,16) New_Loans = sigmoid(\"-\",2.3,6.2,8.4) Loan_Lead_Time = (4.43,30,15) } metrics E_bank_2 { Compl = gauss2(3.5,6,3,8,3) New_Credit_Cards = (295,100,400) Screen_Time = triangle(4.9,1,5,15) New_Loans = sigmoid(\"-\",7.3,6.2,8.4) Loan_Lead_Time = (8.82,30,15) } metrics E_bank_3 { Compl = gauss(1.2,6,3) New_Credit_Cards = (191,100,400) Screen_Time = triangle(9.5,1,5,15) New_Loans = sigmoid(\"-\",7.3,6.2,8.4) Loan_Lead_Time = (2.52,30,15) } grade cumulative E_bank_1, E_bank_2, E_bank_3; grade singular E_bank_1, E_bank_2, E_bank_3; grade comparative E_bank_1, E_bank_2; print E_bank_1, E_bank_2, E_bank_3; make excel report \"Excel_Tutorial\"; }","title":"Example code for report generating"},{"location":"ide-excel/#structure-of-the-generated-excel-report","text":"","title":"Structure of the generated Excel report"},{"location":"ide-excel/#list-of-the-all-assessment-metrics","text":"# Set Name Type Sign Param v Param a Param b Param c Param d 0 E_bank_1 Compl Gaussian type 2 + 2.4 6 3 8 3 1 E_bank_1 New_Credit_Cards Linear + 218 100 400 / / 2 E_bank_1 Screen_Time Trapezoidal - 4 1 5 10 16 3 E_bank_1 New_Loans Sigmoidal - 2.3 6.2 8.4 / / 4 E_bank_1 Loan_Lead_Time Linear + 4.43 30 15 / / ... ... ... ... ... ... ... ... ... ... 12 E_bank_3 Screen_Time Triangular + 9.5 1 5 15 / 13 E_bank_3 New_Loans Sigmoidal - 7.3 6.2 8.4 / / 14 E_bank_3 Loan_Lead_Time Linear + 2.52 30 15 / /","title":"List of the all assessment metrics"},{"location":"ide-excel/#list-of-the-individual-grades","text":"# Metric Grade Max grade 0 E_bank_1 70 100 1 E_bank_2 41 100 2 E_bank_3 83 100","title":"List of the individual grades"},{"location":"ide-excel/#list-containing-the-comaprative-grades","text":"# Metric Grade Max grade 0 E_bank_1 57 100 1 E_bank_2 55 100","title":"List containing the comaprative grades"},{"location":"ide-excel/#list-containing-the-cumultive-grade","text":"# Metric Grade Max grade 0 E_bank_1 1 E_bank_2 2 E_bank_3 3 50 100","title":"List containing the cumultive grade"},{"location":"ide-excel/#example-excel-report","text":"You can download the example Excel report from this tutorial here.","title":"Example Excel report"},{"location":"ide-exi-pro/","text":"Opening the existing project Visual tutorial","title":"Opening the existing project"},{"location":"ide-exi-pro/#opening-the-existing-project","text":"","title":"Opening the existing project"},{"location":"ide-exi-pro/#visual-tutorial","text":"","title":"Visual tutorial"},{"location":"ide-keyboard/","text":"Keyboard shortcuts Supported keyboard shortcuts The following table shows the complete list of keyboard shortcuts supported by ITL Development Studio: Action Keyboard shortcut Action result Help F1 System default browser opens online help. New project Ctrl + N New project opens. Open project Ctrl + O Open file dialogue is opened. Save project Ctrl + S Current active project is saved. Save poject as Ctrl + Alt + S Save file as dialoge is opened. Clear text in code editor Ctrl + D Code editor text is cleared. Cut Ctrl + X The selected text is transfered to a clipboard. Copy Ctrl + C The selected text is copied to a clipboard. Paste Ctrl + V Copied text from a clipboard is pasted. Undo Ctrl + Z The last user action is undoed. Redo Ctrl + Y The last user action is redoed. Exit Alt + F4 Exits the ITL Development Studio.","title":"Keyboard shortcuts"},{"location":"ide-keyboard/#keyboard-shortcuts","text":"","title":"Keyboard shortcuts"},{"location":"ide-keyboard/#supported-keyboard-shortcuts","text":"The following table shows the complete list of keyboard shortcuts supported by ITL Development Studio: Action Keyboard shortcut Action result Help F1 System default browser opens online help. New project Ctrl + N New project opens. Open project Ctrl + O Open file dialogue is opened. Save project Ctrl + S Current active project is saved. Save poject as Ctrl + Alt + S Save file as dialoge is opened. Clear text in code editor Ctrl + D Code editor text is cleared. Cut Ctrl + X The selected text is transfered to a clipboard. Copy Ctrl + C The selected text is copied to a clipboard. Paste Ctrl + V Copied text from a clipboard is pasted. Undo Ctrl + Z The last user action is undoed. Redo Ctrl + Y The last user action is redoed. Exit Alt + F4 Exits the ITL Development Studio.","title":"Supported keyboard shortcuts"},{"location":"ide-new-pro/","text":"Creating a new project Visual tutorial","title":"Creating a new project"},{"location":"ide-new-pro/#creating-a-new-project","text":"","title":"Creating a new project"},{"location":"ide-new-pro/#visual-tutorial","text":"","title":"Visual tutorial"},{"location":"ide-run/","text":"Running code Visual tutorial","title":"Running the code"},{"location":"ide-run/#running-code","text":"","title":"Running code"},{"location":"ide-run/#visual-tutorial","text":"","title":"Visual tutorial"},{"location":"ide-sav-pro/","text":"Saving project Visual tutorial","title":"Saving a project"},{"location":"ide-sav-pro/#saving-project","text":"","title":"Saving project"},{"location":"ide-sav-pro/#visual-tutorial","text":"","title":"Visual tutorial"},{"location":"ide/","text":"The ITL Development Studio Introduction IDL Develoment Studio was implemented with the help of the Tkinter Python library. Its purpose is to facilitate development of IDL assessment reports. Supported features IDL's integrated development environment supports following features: File manipulation (opening, editing, saving) Standard text operations (insert, copy, cut, paste) Undo/Redo operations Code execution Visual support for easy locating errors in syntax Numerical and graphical printing of the execution result Automated populating of editor\u2019s text box with the code pattern Keyboard shortcuts Debugging The first example of syntax error shows an improperly written code (user pressed the run button without finishing the assessment code). IDE prints the error contents in the IDL's terminal. The second example of syntax error shows a misspelled variable name E_bannk (it should have been E_bank ). IDE visually marks the error and prints its contents in the IDL's terminal. The third example of syntax error shows a misspelled instruction name mettrics (it should have been metrics ) IDE visually marks the error and prints its contents in the IDL's terminal with an error line number.","title":"Introduction"},{"location":"ide/#the-itl-development-studio","text":"","title":"The ITL Development Studio"},{"location":"ide/#introduction","text":"IDL Develoment Studio was implemented with the help of the Tkinter Python library. Its purpose is to facilitate development of IDL assessment reports.","title":"Introduction"},{"location":"ide/#supported-features","text":"IDL's integrated development environment supports following features: File manipulation (opening, editing, saving) Standard text operations (insert, copy, cut, paste) Undo/Redo operations Code execution Visual support for easy locating errors in syntax Numerical and graphical printing of the execution result Automated populating of editor\u2019s text box with the code pattern Keyboard shortcuts","title":"Supported features"},{"location":"ide/#debugging","text":"The first example of syntax error shows an improperly written code (user pressed the run button without finishing the assessment code). IDE prints the error contents in the IDL's terminal. The second example of syntax error shows a misspelled variable name E_bannk (it should have been E_bank ). IDE visually marks the error and prints its contents in the IDL's terminal. The third example of syntax error shows a misspelled instruction name mettrics (it should have been metrics ) IDE visually marks the error and prints its contents in the IDL's terminal with an error line number.","title":"Debugging"},{"location":"install/","text":"Installation Downloading and starting up ITL Development Studio In order to run the ITL Development Studio on your computer download: Python IDLE editor from its official website. Run following commands in the terminal to install Python dependencies: pip install numpy pandas matplotlib xlsxwriter xhtml2pdf pip install -U scikit-fuzzy pip install lark-parser --upgrade Download ITL master repository from here. Unpack master archive and open IDLE. Within IDLE load Implementation/main.py. Launch ITL Development Studio by pressing F5 .","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#downloading-and-starting-up-itl-development-studio","text":"In order to run the ITL Development Studio on your computer download: Python IDLE editor from its official website. Run following commands in the terminal to install Python dependencies: pip install numpy pandas matplotlib xlsxwriter xhtml2pdf pip install -U scikit-fuzzy pip install lark-parser --upgrade Download ITL master repository from here. Unpack master archive and open IDLE. Within IDLE load Implementation/main.py. Launch ITL Development Studio by pressing F5 .","title":"Downloading and starting up ITL Development Studio"},{"location":"purpose/","text":"Intended use and purpose General purpose The purpose of the developed language is to provide the assessors with an easy way of assessing and visually displaying company performance metric ratings. Combining metrics Metrics can be taken from different business domains. For example, assessing user satisfaction metrics and financial performance metrics can be combined in order to get an overall assessment of the electronic banking web platform. Assessment methodology The assessment methodology is based on fuzzy membership functions. Upon completing the calculation, i.e. the assessment process of selected fuzzy metrics, the visual and numerical results are presented to the assessor. In the end, the assessor can investigate the assessment results both by investigating numerical results and investigating the graphical metrics representation.","title":"Intended use and purose"},{"location":"purpose/#intended-use-and-purpose","text":"","title":"Intended use and purpose"},{"location":"purpose/#general-purpose","text":"The purpose of the developed language is to provide the assessors with an easy way of assessing and visually displaying company performance metric ratings.","title":"General purpose"},{"location":"purpose/#combining-metrics","text":"Metrics can be taken from different business domains. For example, assessing user satisfaction metrics and financial performance metrics can be combined in order to get an overall assessment of the electronic banking web platform.","title":"Combining metrics"},{"location":"purpose/#assessment-methodology","text":"The assessment methodology is based on fuzzy membership functions. Upon completing the calculation, i.e. the assessment process of selected fuzzy metrics, the visual and numerical results are presented to the assessor. In the end, the assessor can investigate the assessment results both by investigating numerical results and investigating the graphical metrics representation.","title":"Assessment methodology"},{"location":"quick/","text":"Quick introduction One assessment methodology to rule them all In order to obtain a holistic view of the business performance degree, a universal assessment methodology is needed. The ITL performance system can help you create a science-backed-up methodology approach to measure and grade your business system performance. In this way, you can analytically track and measure the progress of your business KPIs and make corrective acts to improve them. Easy to learn even for non-professionals ITL's syntax is specially designed to be easy to learn for non-professionals. In the design process, a state-of-the-art user experience methodology was used. Powerful graphic reports and easy-to-grasp performance rate People focus on what they see. So, in order to maximize the power of business reporting, we made a powerful graphic reporting system so you can easily understand the results of the assessments. Backed-up with science This project is a result of research, adaptation, and implementation of the scientific models proposed by Omogbai, Farzad and Pakdil. Besides that, the Fuzzy set theory, on which this system is based, was implemented according to the research proposals made by \u0141ukasiewicz, Tarski and Zadeh.","title":"Quick introduction"},{"location":"quick/#quick-introduction","text":"","title":"Quick introduction"},{"location":"quick/#one-assessment-methodology-to-rule-them-all","text":"In order to obtain a holistic view of the business performance degree, a universal assessment methodology is needed. The ITL performance system can help you create a science-backed-up methodology approach to measure and grade your business system performance. In this way, you can analytically track and measure the progress of your business KPIs and make corrective acts to improve them.","title":"One assessment methodology to rule them all"},{"location":"quick/#easy-to-learn-even-for-non-professionals","text":"ITL's syntax is specially designed to be easy to learn for non-professionals. In the design process, a state-of-the-art user experience methodology was used.","title":"Easy to learn even for non-professionals"},{"location":"quick/#powerful-graphic-reports-and-easy-to-grasp-performance-rate","text":"People focus on what they see. So, in order to maximize the power of business reporting, we made a powerful graphic reporting system so you can easily understand the results of the assessments.","title":"Powerful graphic reports and easy-to-grasp performance rate"},{"location":"quick/#backed-up-with-science","text":"This project is a result of research, adaptation, and implementation of the scientific models proposed by Omogbai, Farzad and Pakdil. Besides that, the Fuzzy set theory, on which this system is based, was implemented according to the research proposals made by \u0141ukasiewicz, Tarski and Zadeh.","title":"Backed-up with science"},{"location":"release-ide/","text":"Release notes - ITL Development Studio 1.1.1 _ September 25, 2020 Dodat broj verzije ITL-a u About sekciji Promenenjen naziv IDE-a u ITL Development Studio Promenjena po\u010detna veli\u010dina prozora na 700x500 piksela 1.1.0 _ September 24, 2020 Dodat broj verzije ITL-a u About sekciji Promenenjen naziv IDE-a u ITL Development Studio Dodato automatsko ispisivanje trenutne verzije jezika ITL kao broj verzije Development Studija Zna\u010dajnije izmene u organizaciji glavne klase IDE-a, dodate dve nove klase za treding i ozna\u010davanje sintakse teksta Implementirani tagovi sa regex-om za ozna\u010davanje sintakse predefinisanim bojama Implementirana klasa koja nasle\u0111uje osnovnu klasu Text sa metodom za primenu tagova na trenutni kod u tekst editoru Implementacije klase za pokretanje neblokiraju\u0107eg paralelnog procesa sa zadatkom da na svaku 1ms proverava tekst i da prema regex pravilima vizuelno ozna\u010dava sintaksu Zna\u010dajne izmene u vizuelnom izgledu aplikacije: promenjene boje prozora promenjen font i veli\u010dina teksta promenjena boja linije za ozna\u010davanje sintakti\u010dkih gre\u0161aka, promenjena boja selektovanog teksta sa i bez aktivnog fokusa promenjena boja kursora i ikonica kursora kada se nalazi iznad kliza\u010da dodata nova paleta boja za ozna\u010dvanje sintakse promenjena boja menija 1.0.1 _ June 7, 2020 Promenjen paker prozora, umesto pack-a koristi se grid Refaktorisanje koda zadu\u017eenog za pakovanje vid\u017eeta aplikacije. Dodata funkcija i meni dugme za otvaranje online dokumentacije Dodat pomo\u0107ni meni koji se otvara pritiskom na desni klik Dodati akceleratori za svaku stavku menija Dodat automatski fokus u polju tekst editora Ispravljena gre\u0161ka formiranja tre\u0107eg polja grid sitema koje se ne koristi Manje vizuelne izmene u meniju aplikacije Dodata dugmad - pre\u010dice za korak napred-nazad u traci menija aplikacije 1.0.0 _ April 3, 2020 Implementiran integrisani terminal Implementirano novo automatsko definisanje koda kada korisnik otvori nov prazan fajl Dodate tasterske pre\u010dice za sve osnovne komande Dodata ikonica ITL-a u uglu prozora Dodato automatsko menjanje naziva u\u010ditanog fajla u traci prozora Dodata opcija brisanja svog unetog teksta Dodata tasterska pre\u010dica za brisanje svog unetog teksta Dodata opcija za izlazak iz programa sa tasterskom pre\u010dicom Ispravljena gre\u0161ka neresponzivnog pona\u0161anja vid\u017eeta na promenu veli\u010dine prozora Ispravljena gre\u0161ka terminiranja aplikacije kada korisnik pokrene kod a kod nije unesen Manje izmene u prikazu fonta, njegovoj vei\u010dini Izmenjen po\u010detni kod u aplikaciji (pomo\u0107 korisniku prilikom pokretanja aplikacije) Pobolj\u0161an meni za otvaranje fajlova (dodata podr\u0161ka za .itl format) Pobolj\u0161an meni za \u010duvanje fajlova (dodata podr\u0161ka za .itl format) Obra\u0111ena gre\u0161ka lexc.UnexpectedEOF sa odgovaraju\u0107om razumljivom porukom za korisnika Refaktorisan kod za hvatanje generalne gre\u0161ke Definisana nova po\u010detna veli\u010dina prozora na 600x400 piksela 0.1.3 _ March 13, 2020 Implemetriano inicijalno pra\u0107enje gre\u0161aka Implemetirano ozna\u010davanje crvenom linijom sintakti\u010dke gre\u0161ke Implementirana opcija prikrivanja trace-a (DEBUG opcija) Implementirano automatsko ispisivanje po\u010detnog koda Manje izmene u na\u010dinu ispisa informacija u terminalu 0.1.2 _ February 25, 2020 Implementiran mini debager Dodate simboli\u010dke precice za izvr\u0161avanje koda Dodate pre\u010dice za napred/nazad Dodato obave\u0161tenje o verziji IDE-a i ITL-a Dodati kliza\u010di za terminal i tekst editor Dodat nov za\u0161titni znak 0.1.1 _ February 11, 2020 Manje refaktorisanje koda Dodata trka gornjeg menija sa opcijama File, Edit, Help Implementirane opcije za korak nazad/napred 0.1.0 _ February 3, 2020 Initial release","title":"ITL DS release notes"},{"location":"release-ide/#release-notes-itl-development-studio","text":"","title":"Release notes - ITL Development Studio"},{"location":"release-ide/#111-_-september-25-2020","text":"Dodat broj verzije ITL-a u About sekciji Promenenjen naziv IDE-a u ITL Development Studio Promenjena po\u010detna veli\u010dina prozora na 700x500 piksela","title":"1.1.1 _ September 25, 2020"},{"location":"release-ide/#110-_-september-24-2020","text":"Dodat broj verzije ITL-a u About sekciji Promenenjen naziv IDE-a u ITL Development Studio Dodato automatsko ispisivanje trenutne verzije jezika ITL kao broj verzije Development Studija Zna\u010dajnije izmene u organizaciji glavne klase IDE-a, dodate dve nove klase za treding i ozna\u010davanje sintakse teksta Implementirani tagovi sa regex-om za ozna\u010davanje sintakse predefinisanim bojama Implementirana klasa koja nasle\u0111uje osnovnu klasu Text sa metodom za primenu tagova na trenutni kod u tekst editoru Implementacije klase za pokretanje neblokiraju\u0107eg paralelnog procesa sa zadatkom da na svaku 1ms proverava tekst i da prema regex pravilima vizuelno ozna\u010dava sintaksu Zna\u010dajne izmene u vizuelnom izgledu aplikacije: promenjene boje prozora promenjen font i veli\u010dina teksta promenjena boja linije za ozna\u010davanje sintakti\u010dkih gre\u0161aka, promenjena boja selektovanog teksta sa i bez aktivnog fokusa promenjena boja kursora i ikonica kursora kada se nalazi iznad kliza\u010da dodata nova paleta boja za ozna\u010dvanje sintakse promenjena boja menija","title":"1.1.0 _ September 24, 2020"},{"location":"release-ide/#101-_-june-7-2020","text":"Promenjen paker prozora, umesto pack-a koristi se grid Refaktorisanje koda zadu\u017eenog za pakovanje vid\u017eeta aplikacije. Dodata funkcija i meni dugme za otvaranje online dokumentacije Dodat pomo\u0107ni meni koji se otvara pritiskom na desni klik Dodati akceleratori za svaku stavku menija Dodat automatski fokus u polju tekst editora Ispravljena gre\u0161ka formiranja tre\u0107eg polja grid sitema koje se ne koristi Manje vizuelne izmene u meniju aplikacije Dodata dugmad - pre\u010dice za korak napred-nazad u traci menija aplikacije","title":"1.0.1 _ June 7, 2020"},{"location":"release-ide/#100-_-april-3-2020","text":"Implementiran integrisani terminal Implementirano novo automatsko definisanje koda kada korisnik otvori nov prazan fajl Dodate tasterske pre\u010dice za sve osnovne komande Dodata ikonica ITL-a u uglu prozora Dodato automatsko menjanje naziva u\u010ditanog fajla u traci prozora Dodata opcija brisanja svog unetog teksta Dodata tasterska pre\u010dica za brisanje svog unetog teksta Dodata opcija za izlazak iz programa sa tasterskom pre\u010dicom Ispravljena gre\u0161ka neresponzivnog pona\u0161anja vid\u017eeta na promenu veli\u010dine prozora Ispravljena gre\u0161ka terminiranja aplikacije kada korisnik pokrene kod a kod nije unesen Manje izmene u prikazu fonta, njegovoj vei\u010dini Izmenjen po\u010detni kod u aplikaciji (pomo\u0107 korisniku prilikom pokretanja aplikacije) Pobolj\u0161an meni za otvaranje fajlova (dodata podr\u0161ka za .itl format) Pobolj\u0161an meni za \u010duvanje fajlova (dodata podr\u0161ka za .itl format) Obra\u0111ena gre\u0161ka lexc.UnexpectedEOF sa odgovaraju\u0107om razumljivom porukom za korisnika Refaktorisan kod za hvatanje generalne gre\u0161ke Definisana nova po\u010detna veli\u010dina prozora na 600x400 piksela","title":"1.0.0 _ April 3, 2020"},{"location":"release-ide/#013-_-march-13-2020","text":"Implemetriano inicijalno pra\u0107enje gre\u0161aka Implemetirano ozna\u010davanje crvenom linijom sintakti\u010dke gre\u0161ke Implementirana opcija prikrivanja trace-a (DEBUG opcija) Implementirano automatsko ispisivanje po\u010detnog koda Manje izmene u na\u010dinu ispisa informacija u terminalu","title":"0.1.3 _ March 13, 2020"},{"location":"release-ide/#012-_-february-25-2020","text":"Implementiran mini debager Dodate simboli\u010dke precice za izvr\u0161avanje koda Dodate pre\u010dice za napred/nazad Dodato obave\u0161tenje o verziji IDE-a i ITL-a Dodati kliza\u010di za terminal i tekst editor Dodat nov za\u0161titni znak","title":"0.1.2 _ February 25, 2020"},{"location":"release-ide/#011-_-february-11-2020","text":"Manje refaktorisanje koda Dodata trka gornjeg menija sa opcijama File, Edit, Help Implementirane opcije za korak nazad/napred","title":"0.1.1 _ February 11, 2020"},{"location":"release-ide/#010-_-february-3-2020","text":"Initial release","title":"0.1.0 _ February 3, 2020"},{"location":"release-itl/","text":"Release notes - ITL Core 1.1.1 _ October 10, 2020 Ispravljena gre\u0161ka prilikom parsovanja podataka i njihovog sme\u0161tanja u objekat metrika. Sada se podatak metrike prvo pretvara u odgovaraju\u0107i tip (string ili float) i tek onda sme\u0161ta u objekat metrika. Izmenjena metod gradeSing : nova opcija ispisa rang liste skupova metrika obuhva\u0107enih ocenjivanjem 1.1.0 _ September 27, 2020 Ispravljena gre\u0161ka u gramatici sintakse za naredbu grade cumulative (broj parametara mora da bude ta\u010dno dva) Implementiran nov oblik internog modela objekta u kome se \u010duvaju podaci metrike. Uvedena standardizovana polja \"type\" i \"data\" za svaki tip metrike Definisane nove vrste fazi metrika sa opcionim parametrom \"-\" : fazi trapezoidna funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi trougaona funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi Gaus 1 funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi Gaus 2 funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi sigmoidna funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti implementirana nova funkcija za pripremu podataka za ra\u010dunanje linearne fazi funkcije pripadnosti Definisana nova funkcija za ra\u010dunanje prose\u010dne vrednosti ocena metrika unutar jednog skupa metrika Definisana nova funkcija za ra\u010dunanje prose\u010dne vrednosti ocena skupova metrika Refaktorisan deo koda zadu\u017een za formiranje objekata metrike. Napisane nove metode za obradu sintakti\u010dkih naredbi: metod grade za naredbu grade metod gradeCumul za naredbu grade cumulative metod gradeComp za naredbu grade comparative nova opcija ispisa bolje ocene za date metrike (izra\u017eeno u procentima i poenima) metod gradeSing za naredbu grade singular Zbog promene strukture objekta internog modela objekta metrika izmenjen i refaktorisan deo koda zadu\u017een za unos izra\u010dunatih metrika u Excel datoteku Prilago\u0111ena funkcija za iscrtavanje metrike zbog nove strukture internog objekta metrike Manje grafi\u010dke korekcije funkcija za iscrtavanje linearnih fazi funkcija Manje izmene formatiranja ispisa rezultata procene u terminalu 1.0.2 _ September 22, 2020 Implementirano Excel izve\u0161tavanje - sve metrike i rezultati procene sada mogu da se sa\u010duvaju u Excel datoteci Implementirana funkcija gradeZone koja vra\u0107a zonu u kojoj se nalazi ocenjena metrika Dodata nova sintakti\u010dka naredba za Excel izve\u0161tavanje make excel report Promenjene boje grafika Svi moduli vezani za rad ITL jezika sada zbirno nose naziv ITL Core 1.0.1 _ September 15, 2020 Implementirane pre\u010dice na tastaturi Izrada mre\u017ene dokumentacije 1.0.0 _ August 7, 2020 Izra\u0111eno korisni\u010dko uputstvo sa dokumentacijom Preure\u0111ena interna struktura ITL IDE-a 0.1.4 _ June 2, 2020 Implementrian grafi\u010dki prikaz izve\u0161taja 0.1.3 _ March 19, 2020 Implementriana pojedina\u010dna ocena unetog skupa metrika definisana nova sintakti\u010dka naredba grade Implementiran grafi\u010dki prikaz \u017eeljene karakteristike metrike definisana nova sintakti\u010dka naredba draw metric <metric_name>? from <matric_set> Implementriana zbirna ocena unetog skupa metrika definisana nova sintakti\u010dka naredba grade comparative Implementriana kumulativna ocena za \u017eeljene skupove metrika definisana nova sintakti\u010dka naredba grade cumulative 0.1.2 _ February 21, 2020 Implementiran grafi\u010dki prikaz radarskog grafika automatski prikaz vrednosti za trenutnu metriku sa vizuelnim ozna\u010davanjem prvi nivo vizuelnog ozna\u010davanja - zeleno (od 70 bodova do 100 bodova) drugi nivo vizuelnog ozna\u010davanja - narand\u017easto (od 40 bodova do 70 bodova) tre\u0107i nivo vizuelnog ozna\u010davanja - crveno (od 0 bodova do 40 bodova) Implementrian fazi tip 2 grafik Implementriana fazi tip 2 funkcija 0.1.1 _ February 11, 2020 Implementiran fazi tip 1 grafik Implementirana fazi tip 1 funkcija Pobolj\u0161ana sintaksa ITL-a refaktorisana gramatika implementirano ocenjivanje vi\u0161e izve\u0161taja 0.1.0 _ February 3, 2020 Initial release","title":"ITL Core release notes"},{"location":"release-itl/#release-notes-itl-core","text":"","title":"Release notes - ITL Core"},{"location":"release-itl/#111-_-october-10-2020","text":"Ispravljena gre\u0161ka prilikom parsovanja podataka i njihovog sme\u0161tanja u objekat metrika. Sada se podatak metrike prvo pretvara u odgovaraju\u0107i tip (string ili float) i tek onda sme\u0161ta u objekat metrika. Izmenjena metod gradeSing : nova opcija ispisa rang liste skupova metrika obuhva\u0107enih ocenjivanjem","title":"1.1.1 _ October 10, 2020"},{"location":"release-itl/#110-_-september-27-2020","text":"Ispravljena gre\u0161ka u gramatici sintakse za naredbu grade cumulative (broj parametara mora da bude ta\u010dno dva) Implementiran nov oblik internog modela objekta u kome se \u010duvaju podaci metrike. Uvedena standardizovana polja \"type\" i \"data\" za svaki tip metrike Definisane nove vrste fazi metrika sa opcionim parametrom \"-\" : fazi trapezoidna funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi trougaona funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi Gaus 1 funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi Gaus 2 funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti fazi sigmoidna funkcija implementirana funkcija za pripremu podataka i ra\u010dunanje fazi funkcije pripadnosti implementirana nova funkcija za pripremu podataka za ra\u010dunanje linearne fazi funkcije pripadnosti Definisana nova funkcija za ra\u010dunanje prose\u010dne vrednosti ocena metrika unutar jednog skupa metrika Definisana nova funkcija za ra\u010dunanje prose\u010dne vrednosti ocena skupova metrika Refaktorisan deo koda zadu\u017een za formiranje objekata metrike. Napisane nove metode za obradu sintakti\u010dkih naredbi: metod grade za naredbu grade metod gradeCumul za naredbu grade cumulative metod gradeComp za naredbu grade comparative nova opcija ispisa bolje ocene za date metrike (izra\u017eeno u procentima i poenima) metod gradeSing za naredbu grade singular Zbog promene strukture objekta internog modela objekta metrika izmenjen i refaktorisan deo koda zadu\u017een za unos izra\u010dunatih metrika u Excel datoteku Prilago\u0111ena funkcija za iscrtavanje metrike zbog nove strukture internog objekta metrike Manje grafi\u010dke korekcije funkcija za iscrtavanje linearnih fazi funkcija Manje izmene formatiranja ispisa rezultata procene u terminalu","title":"1.1.0 _ September 27, 2020"},{"location":"release-itl/#102-_-september-22-2020","text":"Implementirano Excel izve\u0161tavanje - sve metrike i rezultati procene sada mogu da se sa\u010duvaju u Excel datoteci Implementirana funkcija gradeZone koja vra\u0107a zonu u kojoj se nalazi ocenjena metrika Dodata nova sintakti\u010dka naredba za Excel izve\u0161tavanje make excel report Promenjene boje grafika Svi moduli vezani za rad ITL jezika sada zbirno nose naziv ITL Core","title":"1.0.2 _ September 22, 2020"},{"location":"release-itl/#101-_-september-15-2020","text":"Implementirane pre\u010dice na tastaturi Izrada mre\u017ene dokumentacije","title":"1.0.1 _ September 15, 2020"},{"location":"release-itl/#100-_-august-7-2020","text":"Izra\u0111eno korisni\u010dko uputstvo sa dokumentacijom Preure\u0111ena interna struktura ITL IDE-a","title":"1.0.0 _  August 7, 2020"},{"location":"release-itl/#014-_-june-2-2020","text":"Implementrian grafi\u010dki prikaz izve\u0161taja","title":"0.1.4 _ June 2, 2020"},{"location":"release-itl/#013-_-march-19-2020","text":"Implementriana pojedina\u010dna ocena unetog skupa metrika definisana nova sintakti\u010dka naredba grade Implementiran grafi\u010dki prikaz \u017eeljene karakteristike metrike definisana nova sintakti\u010dka naredba draw metric <metric_name>? from <matric_set> Implementriana zbirna ocena unetog skupa metrika definisana nova sintakti\u010dka naredba grade comparative Implementriana kumulativna ocena za \u017eeljene skupove metrika definisana nova sintakti\u010dka naredba grade cumulative","title":"0.1.3 _ March 19, 2020"},{"location":"release-itl/#012-_-february-21-2020","text":"Implementiran grafi\u010dki prikaz radarskog grafika automatski prikaz vrednosti za trenutnu metriku sa vizuelnim ozna\u010davanjem prvi nivo vizuelnog ozna\u010davanja - zeleno (od 70 bodova do 100 bodova) drugi nivo vizuelnog ozna\u010davanja - narand\u017easto (od 40 bodova do 70 bodova) tre\u0107i nivo vizuelnog ozna\u010davanja - crveno (od 0 bodova do 40 bodova) Implementrian fazi tip 2 grafik Implementriana fazi tip 2 funkcija","title":"0.1.2 _ February 21, 2020"},{"location":"release-itl/#011-_-february-11-2020","text":"Implementiran fazi tip 1 grafik Implementirana fazi tip 1 funkcija Pobolj\u0161ana sintaksa ITL-a refaktorisana gramatika implementirano ocenjivanje vi\u0161e izve\u0161taja","title":"0.1.1 _ February 11, 2020"},{"location":"release-itl/#010-_-february-3-2020","text":"Initial release","title":"0.1.0 _ February 3, 2020"},{"location":"syntax/","text":"Syntax Assessment structure The following excerpt shows the syntax of the ITL and designed tree structure of assessment. Symbol + represents the possibility of using one or several instructions/variables. assessment+ \"Assessment Title\" { metrics+ Metric_set_1 { Metric_linear1+ = (v,a,b), if a<b Metric_linear2+ = (v,b,a), if b>a Metric_trapezoid1+ = trapezoid(v,a,b,c,d) Metric_trapezoid2+ = trapezoid(\"-\",v,a,b,c,d) Metric_triangle1+ = triangle(v,a,b,c) Metric_triangle2+ = trinagle(\"-\",v,a,b,c) Metric_gauss1+ = gauss(v,a,b) Metric_gauss2+ = gauss(\"-\",v,a,b) Metric_gauss21+ = gauss2(v,a,b,c,d) Metric_gauss22+ = gauss2(\"-\",v,a,b,c,d) Metric_sigmoid1+ = sigmoid(v,a,b) Metric_sigmoid2+ = sigmoid(\"-\",v,a,b) } # comment print Metric_set_1+; grade Metric_set_1; # Metric_linear1&2 currently supported draw metric Metric_1+ from Metric_set_1; grade comparative Metric_set_1, Metric_set_2; grade cumulative Metric_set_1+; grade singular Metric_set_1+; make excel report \"Excel Report Title\"; } Syntax reference assessment STRING The assessment object creating instruction. Type : Instruction Identifier : @assess_obj 1st parent: None 1st child: @metrics_set Parameters: STRING : string Defines the assesment report title. Returns: None Limitations: None assessment example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { } } Result: > Code successufully executed. metrics NAME_METRICS_SET The metrics set object creating instruction. Type : Instruction Identifier : @metrics_set 1st parent: @assess_obj 1st child: @metric Parameters: NAME_METRICS_SET : @var_metric_set Metric set variable. Returns: None Limitations: None metrics NAME example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { } } Result: > Code successufully executed. @var_metric_set The @metrics_set variable containing the @metric_var instances. Type : Variable Identifier : @var_metric_set 1st parent: @metrics_set 1st child: None Parameters: [@var_metric_set] Any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None @var_metric_set example Proper varible names: metrName , ebank1 , Metr_1_ebank1 Improper variable names: 1MetricName , Metric name , metric Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metr_1 = (1,1,1) } print Example_Metric_Set; metrics Example_Metric_Set { example_metr_1 = (3,2,13) } print Example_Metric_Set; } Result: > Metric sets values: _____________________ Metric: Example_Metric_Set Values: {'example_metr_1': {'type': 'linear', 'data': {0: Token(NUMBER, '1'), 1: Token(NUMBER, '1'), 2: Token(NUMBER, '1')}}} > Metric sets values: _____________________ Metric: Example_Metric_Set Values: {'example_metr_1': {'type': 'linear', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '2'), 2: Token(NUMBER, '13')}}} > Code successufully executed. (v, a, b) - type 1 Rising slope linear fuzzy function - type 1. Type : Function Identifier : @linear1_fuz_f 1st parent: @metrics_set 1st child: None Parameters: v : float Value to be assessed by type 1 fuzzy function. a : float The worst performance of measured metric.Values below a (including a ) will be given grade 0. b : float The best performance of measured metric. Values above b (including a ) will be given grade 1. Returns: @metric_obj Limitations: a < b Rising linear fuzzy example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_falling = (3.69,13,6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_falling': 38.5}} Grade: 38/100 points Grade zone: red > Code successufully executed. (v, a, b) - type 2 Falling slope linear fuzzy function - type 2. Type : Function Identifier : @linear2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: v : float Value to be assessed by type 2 fuzzy function. a : float The best performance of measured metric.Values below a (including a ) will be given a grade 1. b : float The worst performance of measured metric. Values above b (including a ) will be given a grade 0. Returns: @metric_obj Limitations: a > b Falling linear fuzzy example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_rising = (3.69,0,13) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_rising': 36.077}} Grade: 36/100 points Grade zone: red > Code successufully executed. trapezoid(sign, v, a, b, c, d) Trapezoidal fuzzy function. Positive Type : Function Identifier : @trapezoid__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by trapezoidal fuzzy function. a : float The left side worst performance of measured metric. Values below a (including a ) will be given grade 0. b : float Starting point of the best measured metric performance. Values between b and c will be given grade 1. c : float Ending point of the best measured metric performance. d : float The right side worst performance of measured metric. Values above d (including d ) will be given a grade 0. Returns: @metric_obj Limitations: a < b < c < d Negative Type : Function Identifier : @trapezoid__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by trapezoidal fuzzy function. a : float The left side best performance of measured metric. Values below a (including a ) will be given grade 1. b : float Starting point of the worst measured metric performance. Values between b and c will be given grade 0. c : float Ending point of the worst measured metric performance. d : float The right side best performance of measured metric. Values above d (including d ) will be given a grade 1. Returns: @metric_obj Limitations: a < b < c < d Trapezoidal fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_trap = trapezoid(3.69,1,6,9,11) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'trap': 53.8}} Grade: 54/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_trap = trapezoid(\"-\",3.69,1,6,9,11) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'trap': 46.2}} Grade: 46/100 points Grade zone: orange > Code successufully executed. triangle(sign, v, a, b, c) Triangular fuzzy function. Positive Type : Function Identifier : @triangle__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by triangular fuzzy function. a : float The left side worst performance of measured metric. Values below a (including a ) will be given grade 0. b : float The best performance of measured metric. Values equal to b will be given a grade 1. c : float The right side worst performance of measured metric. Values above c (including c ) will be given a grade 0. Returns: @metric_obj Limitations: a < b < c Negative Type : Function Identifier : @triangle__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by triangular fuzzy function. a : float The left side best performance of measured metric. Values below a (including a ) will be given grade 1. b : float The worst performance of measured metric. Values equal to b will be given a grade 0. c : float The right side best performance of measured metric. Values above c (including c ) will be given a grade 1. Returns: @metric_obj Limitations: a < b < c Triangular fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_tria = triangle(6.39,3,6,9) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_tria': 87.0}} Grade: 87/100 points Grade zone: green > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_tria = triangle(\"-\",6.39,3,6,9) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_tria': 13.0}} Grade: 13/100 points Grade zone: red > Code successufully executed. gauss(sign, v, mean, sigma) Experimental Experimental Gaussian type 1 fuzzy function. For a given value calculates its closeness to the average value of the given ( \\(\\mu\\) , \\(\\sigma\\) ) Gaussian distribution. Positive Type : Function Identifier : @gauss2__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by gaussian fuzzy function. mean : float Parameter \\(\\mu\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by gaussian fuzzy function. mean : float Parameter \\(\\mu\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Gaussian type 1 fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus = gauss(3,6,3.36) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus': 67.126}} Grade: 67/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus = gauss(\"-\",3,6,3.36) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus': 32.874}} Grade: 67/100 points Grade zone: red > Code successufully executed. gauss2(sign, v, mean1, sigma1, mean2, sigma2) Experimental Experimental Gaussian type 2 fuzzy function. For a given value calculates its level of membership for the two combined ( \\(\\mu_1\\) , \\(\\sigma_1\\) ), ( \\(\\mu_2\\) , \\(\\sigma_2\\) ) Gaussian distributions. Positive Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by gaussian2 fuzzy function. mean1 : float Parameter \\(\\mu_1\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma_1\\) of the given gaussian distribution. mean2 : float Parameter \\(\\mu_2\\) of the given gaussian distribution. sigma2 : float Parameter \\(\\sigma_2\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by gaussian2 fuzzy function. mean1 : float Parameter \\(\\mu_1\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma_1\\) of the given gaussian distribution. mean2 : float Parameter \\(\\mu_2\\) of the given gaussian distribution. sigma2 : float Parameter \\(\\sigma_2\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Gaussian type 2 fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus2 = gauss2(4,6,3,8,3) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus2': 80.074}} Grade: 80/100 points Grade zone: green > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus2 = gauss2(\"-\"4,6,3,8,3) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus2': 19.926}} Grade: 20/100 points Grade zone: red > Code successufully executed. sigmoid(sign, v, center, width) Experimental Experimental Sigmoidal fuzzy function. Positive Type : Function Identifier : @sigmoid_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" Parameters: v : float Value to be assessed by sigmoidal fuzzy function. center : float The center value of the sigmoid, where it equals 0.5. width : float \"Width\" of the sigmoidal region about center. Defines also also which side of the function is open (sign). For width > 0 the left side approaches 0 and right side approaches 1. For width < 0 the right side approaches 1 and the lefts side approaches 0. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @sigmoid_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. Parameters: v : float Value to be assessed by sigmoidal fuzzy function. center : float The center value of the sigmoid, where it equals 0.5. width : float \"Width\" of the sigmoidal region about center. Defines also also which side of the function is open (sign). For width < 0 the left side approaches 0 and right side approaches 1. For width > 0 the right side approaches 1 and the lefts side approaches 0. Returns: @metric_obj Limitations: None Sigmoidal fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_sigmoid = sigmoid(6.93,6.9,9.6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_sigmoid': 67.252}} Grade: 67/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_sigmoid = sigmoid(\"-\",6.93,6.9,9.6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_sigmoid': 32.748}} Grade: 33/100 points Grade zone: red > Code successufully executed. print NAME_METRICS_SET; Prints the defined metrics raw data to the standard output and to the Excel report object. Type : Instruction Identifier : @print 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set which metrics are going to be printed out. Can be any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None print example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metric = (10,20,50) } } print Example_Metric_Set; Result: > Metric sets values: ____________________ Metric: Example_Metric_Set Values: {'example_metric': {'type': 'linear', 'data': {0: Token(NUMBER, '10'), 1: Token(NUMBER, '20'), 2: Token(NUMBER, '50')}}} > Code successufully executed. grade NAME_METRICS_SET; Calculates grade of the defined metric set. Type : Instruction Identifier : @grade 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be graded. Can be any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None grade example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metric = (35,20,50) } } grade Example_Metric_Set; Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'example_metric': 50.0}} Grade: 50/100 points Grade zone: orange > Code successufully executed. grade singular NAME_METRICS_SET+; Individually grades defined metric sets. Prints out individual grades of all graded metrics as far as leaderboard containing descending list of metric set scores. Type : Instruction Identifier : @grade 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET+ : name Name of the metrics set to be individually graded. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade singular example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (22,20,50) } metrics Example_Metric_Set_3 { example_metric = (47,20,50) } grade singular Example_Metric_Set_1,Example_Metric_Set_2,Example_Metric_Set_3; } Result: > Individual grades: ___________________ Metric set: Example_Metric_Set_1 Grade: 50/100 points Grade zone: orange Metric set: Example_Metric_Set_2 Grade: 3/100 points Grade zone: red Metric set: Example_Metric_Set_3 Grade: 90/100 points Grade zone: green > Leaderboard: ____________________________________ 1. Metric set: ('Example_Metric_Set_3', 90.0) 2. Metric set: ('Example_Metric_Set_1', 50.0) 3. Metric set: ('Example_Metric_Set_2', 3.333) > Code successufully executed. grade comparative NAME_METRICS_SET~2; Grades two defined metric sets and compares their grades. Prints out additional information. Type : Instruction Identifier : @grade_com 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be included for comparing the metrics set grades. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade comparative example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (26,20,50) } grade comparative Example_Metric_Set_1,Example_Metric_Set_2; } Result: > Comparative grade: ___________________ Metric sets: {'Example_Metric_Set_1': {'example_metric': 50.0}, 'Example_Metric_Set_2': {'example_metric': 20.0}} > Result: The metric Example_Metric_Set_1 has 150% higer grade than the metric Example_Metric_Set_2. Grades: {'Example_Metric_Set_1': 50, 'Example_Metric_Set_2': 20} > Code successufully executed. grade cumulative NAME_METRICS_SET+; Cumulatively grades the list of defined metric sets. Prints out cumulative grade. Type : Instruction Identifier : @grade_cml 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be included in the calculation of the average metric grade. List of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade cumulative example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (26,20,50) } metrics Example_Metric_Set_3 { example_metric = (47,20,50) } grade cumulative Example_Metric_Set_1,Example_Metric_Set_2,Example_Metric_Set_3; } Result: > Cumulative grade: __________________ Metric sets: {'Example_Metric_Set_1': {'example_metric': 50.0}, 'Example_Metric_Set_2': {'example_metric': 20.0}, 'Example_Metric_Set_3': {'example_metric': 90.0}} Grade: 53/100 points Grade zone: orange > Code successufully executed. draw metric NAME_METRIC+ from NAME_METRICS_SET; Draws a membership function graph of the selected metrics from the defined metric set. Also, visually displays the positon of the assessed value. Type : Instruction Identifier : @grade_drw 1st parent: @assesment 1st child: None Parameters: NAME_METRIC : name The name of a metric from the set of metrics to be drawn. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. NAME_METRICS_SET : name Name of the metrics set from wich the metrcis are going to be drawn. Can be any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: Before executing this instruction @metric_set has to be graded first (grade NAME_METRICS_SET;). draw metric example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric_1 = (35,20,50) example_metric_2 = triangle(47,20,50,100) } grade Example_Metric_Set_1; draw metric example_metric_1 from Example_Metric_Set_1; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set_1': {'example_metric_1': 50.0, 'example_metric_2': 90.0}} Grade: 70/100 points Grade zone: green Drawing metrics: Example_Metric_Set_1 example_metric_1 50.0 > Code successufully executed. make excel report STRING; Creates a MS Excel .xlsx document containing assessment data and results. Type : Instruction Identifier : @make_rep_exc 1st parent: @assesment 1st child: None Parameters: STRING : string Specifies a name of the MS Excel report document. Returns: None Limitations: Before executing this instruction ethier one or multiple following instructions have to be executed first: grade singular NAME_METRICS_SET grade comparative NAME_METRICS_SET~2 grade cumulative NAME_METRICS_SET+ make excel report example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric_1 = (35,20,50) example_metric_2 = triangle(47,20,50,100) } metrics Example_Metric_Set_2 { example_metric_1 = (45,20,50) example_metric_2 = triangle(32,20,50,100) } grade cumulative Example_Metric_Set_1,Example_Metric_Set_2; make excel report \"Example_Excel_Report\"; } Result: > Cumulative grade: __________________ Metric sets: {'Example_Metric_Set_1': {'example_metric_1': 50.0, 'example_metric_2': 90.0}, 'Example_Metric_Set_2': {'example_metric_1': 83.333, 'example_metric_2': 40.0}} Grade: 66/100 points Grade zone: orange > Code successufully executed. Notice The development of the documentation section is in progress.","title":"Syntax"},{"location":"syntax/#syntax","text":"","title":"Syntax"},{"location":"syntax/#assessment-structure","text":"The following excerpt shows the syntax of the ITL and designed tree structure of assessment. Symbol + represents the possibility of using one or several instructions/variables. assessment+ \"Assessment Title\" { metrics+ Metric_set_1 { Metric_linear1+ = (v,a,b), if a<b Metric_linear2+ = (v,b,a), if b>a Metric_trapezoid1+ = trapezoid(v,a,b,c,d) Metric_trapezoid2+ = trapezoid(\"-\",v,a,b,c,d) Metric_triangle1+ = triangle(v,a,b,c) Metric_triangle2+ = trinagle(\"-\",v,a,b,c) Metric_gauss1+ = gauss(v,a,b) Metric_gauss2+ = gauss(\"-\",v,a,b) Metric_gauss21+ = gauss2(v,a,b,c,d) Metric_gauss22+ = gauss2(\"-\",v,a,b,c,d) Metric_sigmoid1+ = sigmoid(v,a,b) Metric_sigmoid2+ = sigmoid(\"-\",v,a,b) } # comment print Metric_set_1+; grade Metric_set_1; # Metric_linear1&2 currently supported draw metric Metric_1+ from Metric_set_1; grade comparative Metric_set_1, Metric_set_2; grade cumulative Metric_set_1+; grade singular Metric_set_1+; make excel report \"Excel Report Title\"; }","title":"Assessment structure"},{"location":"syntax/#syntax-reference","text":"","title":"Syntax reference"},{"location":"syntax/#assessment-string","text":"The assessment object creating instruction. Type : Instruction Identifier : @assess_obj 1st parent: None 1st child: @metrics_set Parameters: STRING : string Defines the assesment report title. Returns: None Limitations: None assessment example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { } } Result: > Code successufully executed.","title":"assessment STRING"},{"location":"syntax/#metrics-name_metrics_set","text":"The metrics set object creating instruction. Type : Instruction Identifier : @metrics_set 1st parent: @assess_obj 1st child: @metric Parameters: NAME_METRICS_SET : @var_metric_set Metric set variable. Returns: None Limitations: None metrics NAME example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { } } Result: > Code successufully executed.","title":"metrics NAME_METRICS_SET"},{"location":"syntax/#var_metric_set","text":"The @metrics_set variable containing the @metric_var instances. Type : Variable Identifier : @var_metric_set 1st parent: @metrics_set 1st child: None Parameters: [@var_metric_set] Any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None @var_metric_set example Proper varible names: metrName , ebank1 , Metr_1_ebank1 Improper variable names: 1MetricName , Metric name , metric Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metr_1 = (1,1,1) } print Example_Metric_Set; metrics Example_Metric_Set { example_metr_1 = (3,2,13) } print Example_Metric_Set; } Result: > Metric sets values: _____________________ Metric: Example_Metric_Set Values: {'example_metr_1': {'type': 'linear', 'data': {0: Token(NUMBER, '1'), 1: Token(NUMBER, '1'), 2: Token(NUMBER, '1')}}} > Metric sets values: _____________________ Metric: Example_Metric_Set Values: {'example_metr_1': {'type': 'linear', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '2'), 2: Token(NUMBER, '13')}}} > Code successufully executed.","title":"@var_metric_set"},{"location":"syntax/#v-a-b-type-1","text":"Rising slope linear fuzzy function - type 1. Type : Function Identifier : @linear1_fuz_f 1st parent: @metrics_set 1st child: None Parameters: v : float Value to be assessed by type 1 fuzzy function. a : float The worst performance of measured metric.Values below a (including a ) will be given grade 0. b : float The best performance of measured metric. Values above b (including a ) will be given grade 1. Returns: @metric_obj Limitations: a < b Rising linear fuzzy example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_falling = (3.69,13,6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_falling': 38.5}} Grade: 38/100 points Grade zone: red > Code successufully executed.","title":"(v, a, b) - type 1"},{"location":"syntax/#v-a-b-type-2","text":"Falling slope linear fuzzy function - type 2. Type : Function Identifier : @linear2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: v : float Value to be assessed by type 2 fuzzy function. a : float The best performance of measured metric.Values below a (including a ) will be given a grade 1. b : float The worst performance of measured metric. Values above b (including a ) will be given a grade 0. Returns: @metric_obj Limitations: a > b Falling linear fuzzy example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_rising = (3.69,0,13) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_rising': 36.077}} Grade: 36/100 points Grade zone: red > Code successufully executed.","title":"(v, a, b) - type 2"},{"location":"syntax/#trapezoidsign-v-a-b-c-d","text":"Trapezoidal fuzzy function. Positive Type : Function Identifier : @trapezoid__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by trapezoidal fuzzy function. a : float The left side worst performance of measured metric. Values below a (including a ) will be given grade 0. b : float Starting point of the best measured metric performance. Values between b and c will be given grade 1. c : float Ending point of the best measured metric performance. d : float The right side worst performance of measured metric. Values above d (including d ) will be given a grade 0. Returns: @metric_obj Limitations: a < b < c < d Negative Type : Function Identifier : @trapezoid__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by trapezoidal fuzzy function. a : float The left side best performance of measured metric. Values below a (including a ) will be given grade 1. b : float Starting point of the worst measured metric performance. Values between b and c will be given grade 0. c : float Ending point of the worst measured metric performance. d : float The right side best performance of measured metric. Values above d (including d ) will be given a grade 1. Returns: @metric_obj Limitations: a < b < c < d Trapezoidal fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_trap = trapezoid(3.69,1,6,9,11) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'trap': 53.8}} Grade: 54/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_trap = trapezoid(\"-\",3.69,1,6,9,11) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'trap': 46.2}} Grade: 46/100 points Grade zone: orange > Code successufully executed.","title":"trapezoid(sign, v, a, b, c, d)"},{"location":"syntax/#trianglesign-v-a-b-c","text":"Triangular fuzzy function. Positive Type : Function Identifier : @triangle__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by triangular fuzzy function. a : float The left side worst performance of measured metric. Values below a (including a ) will be given grade 0. b : float The best performance of measured metric. Values equal to b will be given a grade 1. c : float The right side worst performance of measured metric. Values above c (including c ) will be given a grade 0. Returns: @metric_obj Limitations: a < b < c Negative Type : Function Identifier : @triangle__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by triangular fuzzy function. a : float The left side best performance of measured metric. Values below a (including a ) will be given grade 1. b : float The worst performance of measured metric. Values equal to b will be given a grade 0. c : float The right side best performance of measured metric. Values above c (including c ) will be given a grade 1. Returns: @metric_obj Limitations: a < b < c Triangular fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_tria = triangle(6.39,3,6,9) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_tria': 87.0}} Grade: 87/100 points Grade zone: green > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_tria = triangle(\"-\",6.39,3,6,9) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_tria': 13.0}} Grade: 13/100 points Grade zone: red > Code successufully executed.","title":"triangle(sign, v, a, b, c)"},{"location":"syntax/#gausssign-v-mean-sigma","text":"Experimental Experimental Gaussian type 1 fuzzy function. For a given value calculates its closeness to the average value of the given ( \\(\\mu\\) , \\(\\sigma\\) ) Gaussian distribution. Positive Type : Function Identifier : @gauss2__fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by gaussian fuzzy function. mean : float Parameter \\(\\mu\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by gaussian fuzzy function. mean : float Parameter \\(\\mu\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Gaussian type 1 fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus = gauss(3,6,3.36) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus': 67.126}} Grade: 67/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus = gauss(\"-\",3,6,3.36) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus': 32.874}} Grade: 67/100 points Grade zone: red > Code successufully executed.","title":"gauss(sign, v, mean, sigma)"},{"location":"syntax/#gauss2sign-v-mean1-sigma1-mean2-sigma2","text":"Experimental Experimental Gaussian type 2 fuzzy function. For a given value calculates its level of membership for the two combined ( \\(\\mu_1\\) , \\(\\sigma_1\\) ), ( \\(\\mu_2\\) , \\(\\sigma_2\\) ) Gaussian distributions. Positive Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" v : float Value to be assessed by gaussian2 fuzzy function. mean1 : float Parameter \\(\\mu_1\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma_1\\) of the given gaussian distribution. mean2 : float Parameter \\(\\mu_2\\) of the given gaussian distribution. sigma2 : float Parameter \\(\\sigma_2\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @gauss2_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. v : float Value to be assessed by gaussian2 fuzzy function. mean1 : float Parameter \\(\\mu_1\\) of the given gaussian distribution. sigma : float Parameter \\(\\sigma_1\\) of the given gaussian distribution. mean2 : float Parameter \\(\\mu_2\\) of the given gaussian distribution. sigma2 : float Parameter \\(\\sigma_2\\) of the given gaussian distribution. Returns: @metric_obj Limitations: None Gaussian type 2 fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus2 = gauss2(4,6,3,8,3) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus2': 80.074}} Grade: 80/100 points Grade zone: green > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_gaus2 = gauss2(\"-\"4,6,3,8,3) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_gaus2': 19.926}} Grade: 20/100 points Grade zone: red > Code successufully executed.","title":"gauss2(sign, v, mean1, sigma1, mean2, sigma2)"},{"location":"syntax/#sigmoidsign-v-center-width","text":"Experimental Experimental Sigmoidal fuzzy function. Positive Type : Function Identifier : @sigmoid_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign : string Optional. Fuzzy function sign. Can be \"-\" or \"+\". Default value is \"+\" Parameters: v : float Value to be assessed by sigmoidal fuzzy function. center : float The center value of the sigmoid, where it equals 0.5. width : float \"Width\" of the sigmoidal region about center. Defines also also which side of the function is open (sign). For width > 0 the left side approaches 0 and right side approaches 1. For width < 0 the right side approaches 1 and the lefts side approaches 0. Returns: @metric_obj Limitations: None Negative Type : Function Identifier : @sigmoid_fuz_f 1st parent: @metrics_set 1st child: None Parameters: sign = '-' Fuzzy function sign. Parameters: v : float Value to be assessed by sigmoidal fuzzy function. center : float The center value of the sigmoid, where it equals 0.5. width : float \"Width\" of the sigmoidal region about center. Defines also also which side of the function is open (sign). For width < 0 the left side approaches 0 and right side approaches 1. For width > 0 the right side approaches 1 and the lefts side approaches 0. Returns: @metric_obj Limitations: None Sigmoidal fuzzy examples Example 1 Basic use: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_sigmoid = sigmoid(6.93,6.9,9.6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_sigmoid': 67.252}} Grade: 67/100 points Grade zone: orange > Code successufully executed. Example 2 Advanced use with defined sign parameter: assessment \"Example Report Title\" { metrics Example_Metric_Set { fuzzy_sigmoid = sigmoid(\"-\",6.93,6.9,9.6) } grade Example_Metric_Set; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'fuzzy_sigmoid': 32.748}} Grade: 33/100 points Grade zone: red > Code successufully executed.","title":"sigmoid(sign, v, center, width)"},{"location":"syntax/#print-name_metrics_set","text":"Prints the defined metrics raw data to the standard output and to the Excel report object. Type : Instruction Identifier : @print 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set which metrics are going to be printed out. Can be any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None print example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metric = (10,20,50) } } print Example_Metric_Set; Result: > Metric sets values: ____________________ Metric: Example_Metric_Set Values: {'example_metric': {'type': 'linear', 'data': {0: Token(NUMBER, '10'), 1: Token(NUMBER, '20'), 2: Token(NUMBER, '50')}}} > Code successufully executed.","title":"print NAME_METRICS_SET;"},{"location":"syntax/#grade-name_metrics_set","text":"Calculates grade of the defined metric set. Type : Instruction Identifier : @grade 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be graded. Can be any letter or digit combination excluding keywords and whitespace. Cannot start with the digit either. Returns: None Limitations: None grade example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set { example_metric = (35,20,50) } } grade Example_Metric_Set; Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set': {'example_metric': 50.0}} Grade: 50/100 points Grade zone: orange > Code successufully executed.","title":"grade NAME_METRICS_SET;"},{"location":"syntax/#grade-singular-name_metrics_set","text":"Individually grades defined metric sets. Prints out individual grades of all graded metrics as far as leaderboard containing descending list of metric set scores. Type : Instruction Identifier : @grade 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET+ : name Name of the metrics set to be individually graded. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade singular example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (22,20,50) } metrics Example_Metric_Set_3 { example_metric = (47,20,50) } grade singular Example_Metric_Set_1,Example_Metric_Set_2,Example_Metric_Set_3; } Result: > Individual grades: ___________________ Metric set: Example_Metric_Set_1 Grade: 50/100 points Grade zone: orange Metric set: Example_Metric_Set_2 Grade: 3/100 points Grade zone: red Metric set: Example_Metric_Set_3 Grade: 90/100 points Grade zone: green > Leaderboard: ____________________________________ 1. Metric set: ('Example_Metric_Set_3', 90.0) 2. Metric set: ('Example_Metric_Set_1', 50.0) 3. Metric set: ('Example_Metric_Set_2', 3.333) > Code successufully executed.","title":"grade singular NAME_METRICS_SET+;"},{"location":"syntax/#grade-comparative-name_metrics_set2","text":"Grades two defined metric sets and compares their grades. Prints out additional information. Type : Instruction Identifier : @grade_com 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be included for comparing the metrics set grades. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade comparative example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (26,20,50) } grade comparative Example_Metric_Set_1,Example_Metric_Set_2; } Result: > Comparative grade: ___________________ Metric sets: {'Example_Metric_Set_1': {'example_metric': 50.0}, 'Example_Metric_Set_2': {'example_metric': 20.0}} > Result: The metric Example_Metric_Set_1 has 150% higer grade than the metric Example_Metric_Set_2. Grades: {'Example_Metric_Set_1': 50, 'Example_Metric_Set_2': 20} > Code successufully executed.","title":"grade comparative NAME_METRICS_SET~2;"},{"location":"syntax/#grade-cumulative-name_metrics_set","text":"Cumulatively grades the list of defined metric sets. Prints out cumulative grade. Type : Instruction Identifier : @grade_cml 1st parent: @assesment 1st child: None Parameters: NAME_METRICS_SET : name Name of the metrics set to be included in the calculation of the average metric grade. List of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: None grade cumulative example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric = (35,20,50) } metrics Example_Metric_Set_2 { example_metric = (26,20,50) } metrics Example_Metric_Set_3 { example_metric = (47,20,50) } grade cumulative Example_Metric_Set_1,Example_Metric_Set_2,Example_Metric_Set_3; } Result: > Cumulative grade: __________________ Metric sets: {'Example_Metric_Set_1': {'example_metric': 50.0}, 'Example_Metric_Set_2': {'example_metric': 20.0}, 'Example_Metric_Set_3': {'example_metric': 90.0}} Grade: 53/100 points Grade zone: orange > Code successufully executed.","title":"grade cumulative NAME_METRICS_SET+;"},{"location":"syntax/#draw-metric-name_metric-from-name_metrics_set","text":"Draws a membership function graph of the selected metrics from the defined metric set. Also, visually displays the positon of the assessed value. Type : Instruction Identifier : @grade_drw 1st parent: @assesment 1st child: None Parameters: NAME_METRIC : name The name of a metric from the set of metrics to be drawn. Can be a list of any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. NAME_METRICS_SET : name Name of the metrics set from wich the metrcis are going to be drawn. Can be any letter or digit combination excluding keywords and whitespace separated with comma. Cannot start with the digit either. Returns: None Limitations: Before executing this instruction @metric_set has to be graded first (grade NAME_METRICS_SET;). draw metric example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric_1 = (35,20,50) example_metric_2 = triangle(47,20,50,100) } grade Example_Metric_Set_1; draw metric example_metric_1 from Example_Metric_Set_1; } Result: > Metric grade: ______________ Metric set: {'Example_Metric_Set_1': {'example_metric_1': 50.0, 'example_metric_2': 90.0}} Grade: 70/100 points Grade zone: green Drawing metrics: Example_Metric_Set_1 example_metric_1 50.0 > Code successufully executed.","title":"draw metric NAME_METRIC+ from NAME_METRICS_SET;"},{"location":"syntax/#make-excel-report-string","text":"Creates a MS Excel .xlsx document containing assessment data and results. Type : Instruction Identifier : @make_rep_exc 1st parent: @assesment 1st child: None Parameters: STRING : string Specifies a name of the MS Excel report document. Returns: None Limitations: Before executing this instruction ethier one or multiple following instructions have to be executed first: grade singular NAME_METRICS_SET grade comparative NAME_METRICS_SET~2 grade cumulative NAME_METRICS_SET+ make excel report example Code: assessment \"Example Report Title\" { metrics Example_Metric_Set_1 { example_metric_1 = (35,20,50) example_metric_2 = triangle(47,20,50,100) } metrics Example_Metric_Set_2 { example_metric_1 = (45,20,50) example_metric_2 = triangle(32,20,50,100) } grade cumulative Example_Metric_Set_1,Example_Metric_Set_2; make excel report \"Example_Excel_Report\"; } Result: > Cumulative grade: __________________ Metric sets: {'Example_Metric_Set_1': {'example_metric_1': 50.0, 'example_metric_2': 90.0}, 'Example_Metric_Set_2': {'example_metric_1': 83.333, 'example_metric_2': 40.0}} Grade: 66/100 points Grade zone: orange > Code successufully executed.","title":"make excel report STRING;"},{"location":"syntax/#notice","text":"The development of the documentation section is in progress.","title":"Notice"},{"location":"tutorial-advanced/","text":"Advanced tutorial Introduction This advanced tutorial will guide you through the basic ITL capabilites. For the sake of demonstration, we will assess the perfomance metrics of the three digital products used by three different banks operating under a single bank group. The bank names are going to be as follows: E_bank_1 , E_bank_2 , and E_bank_3 . Of course, when we speak about digital products, it is implied that we speak of e-banking web applications. What are we going to measure and assess? We will define five metrics that will be used within this evaluation system. The metric scores are calculated using the Python Skfuzzy Library. Metrics definitions (monitored on a monthly basis): Metric 1: Number of complaints Definition: The number of users' complaints about the web application performance. Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 Worst value (a) 5 Metric 2: Loan lead time Definition: The average amount of time that passes between application submission and loan approval Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 days Worst value (a) 15 days Metric 3: Number of the approved loans Definition: The number of approved loans Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 500 Worst value (a) 30 Metric 4: Application screen time Definition: The average period of time a user spends using the web application on a daily basis Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 15 min Worst value (a) 1 min Metric 5: Newly issued credit cards Definition: The number of newly issued credit cards Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 400 pcs. Worst value (a) 100 pcs. Assessment code assessment \"June Performance Assessment Report - E-bank Group\" { # We define sets of metrics for all three banks metrics E_bank_1 { # Defining the Complaints metric Compl = (3,20,5) New_Credit_Cards = (218,100,400) Screen_Time = (7.4,1,15) New_Loans = (305,30,500) Loan_Lead_Time = (4.43,30,15) } metrics E_bank_2 { Compl = (1,20,5) New_Credit_Cards = (295,100,400) Screen_Time = (4.9,1,15) New_Loans = (352,30,500) Loan_Lead_Time = (8.82,30,15) } metrics E_bank_3 { Compl = (4,20,5) New_Credit_Cards = (191,100,400) Screen_Time = (9.5,1,15) New_Loans = (254,30,500) Loan_Lead_Time = (2.52,30,15) } # Print out the overall grade of all three banks grade cumulative E_bank_1, E_bank_2, E_bank_3; # Individually assess the grades of each bank grade singular E_bank_1, E_bank_2, E_bank_3; # The third bank got the worst grade. # Let us examine why: grade E_bank_3; # The third bank made the worst result for metrics Compl # and New_Credit_Cards. Let us draw them so we # can examine them better: draw metric Compl, New_Credit_Cards from E_bank_3; # At the end, we will compare the overall success # of the first and second bank: grade comparative E_bank_1, E_bank_2; # In order to print all the original metrics data # we can use the following instruction: print E_bank_1, E_bank_2, E_bank_3; } What are we going to get from the assessment? Numerical result > Cumulative grade: __________________ Metric sets: {'E_bank_1': {'Compl': 40.0, 'New_Credit_Cards': 39.333, 'Screen_Time': 45.714, 'New_Loans': 58.511, 'Loan_Lead_Time': 70.467}, 'E_bank_2': {'Compl': 80.0, 'New_Credit_Cards': 65.0, 'Screen_Time': 27.857, 'New_Loans': 68.511, 'Loan_Lead_Time': 41.2}, 'E_bank_3': {'Compl': 20.0, 'New_Credit_Cards': 30.333, 'Screen_Time': 60.714, 'New_Loans': 47.66, 'Loan_Lead_Time': 83.2}} Grade: 52/100 points Grade zone: orange > Individual grades: ___________________ Metric set: E_bank_1 Grade: 70/100 points Grade zone: green Metric set: E_bank_2 Grade: 41/100 points Grade zone: orange Metric set: E_bank_3 Grade: 83/100 points Grade zone: green > Leaderboard: ____________________________________ 1. Metric set: ('E_bank_3', 83.2) 2. Metric set: ('E_bank_1', 70.467) 3. Metric set: ('E_bank_2', 41.2) > Metric grade: ______________ Metric set: {'E_bank_3': {'Compl': 20.0, 'New_Credit_Cards': 30.333, 'Screen_Time': 60.714, 'New_Loans': 47.66, 'Loan_Lead_Time': 83.2}} Grade: 48/100 points Grade zone: orange > Drawing metrics: E_bank_3 Compl 20.0 New_Credit_Cards 30.333 > Comparative grade: ___________________ Metric sets: {'E_bank_1': {'Compl': 40.0, 'New_Credit_Cards': 39.333, 'Screen_Time': 45.714, 'New_Loans': 58.511, 'Loan_Lead_Time': 70.467}, 'E_bank_2': {'Compl': 80.0, 'New_Credit_Cards': 65.0, 'Screen_Time': 27.857, 'New_Loans': 68.511, 'Loan_Lead_Time': 41.2}} The metric E_bank_2 has 12% higer grade than the metric E_bank_1. Grades: {'E_bank_1': 51, 'E_bank_2': 57} > Metric sets values: ____________________ Metric: E_bank_1 Values: {'Compl': {'type': 'linear', 'data': {0: 3.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 218.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 7.4, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 305.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 4.43, 1: 30.0, 2: 15.0}}} Metric: E_bank_2 Values: {'Compl': {'type': 'linear', 'data': {0: 1.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 295.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 4.9, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 352.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 8.82, 1: 30.0, 2: 15.0}}} Metric: E_bank_3 Values: {'Compl': {'type': 'linear', 'data': {0: 4.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 191.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 9.5, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 254.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 2.52, 1: 30.0, 2: 15.0}}} > Code successufully executed. Radar chart Comparative radar chart Fuzzy rising metric - type 1 Fuzzy falling metric - type 2 Discussion This documentation paragraph will be available soon.","title":"Advanced tutorial"},{"location":"tutorial-advanced/#advanced-tutorial","text":"","title":"Advanced tutorial"},{"location":"tutorial-advanced/#introduction","text":"This advanced tutorial will guide you through the basic ITL capabilites. For the sake of demonstration, we will assess the perfomance metrics of the three digital products used by three different banks operating under a single bank group. The bank names are going to be as follows: E_bank_1 , E_bank_2 , and E_bank_3 . Of course, when we speak about digital products, it is implied that we speak of e-banking web applications.","title":"Introduction"},{"location":"tutorial-advanced/#what-are-we-going-to-measure-and-assess","text":"We will define five metrics that will be used within this evaluation system. The metric scores are calculated using the Python Skfuzzy Library. Metrics definitions (monitored on a monthly basis):","title":"What are we going to measure and assess?"},{"location":"tutorial-advanced/#metric-1-number-of-complaints","text":"Definition: The number of users' complaints about the web application performance. Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 Worst value (a) 5","title":"Metric 1: Number of complaints"},{"location":"tutorial-advanced/#metric-2-loan-lead-time","text":"Definition: The average amount of time that passes between application submission and loan approval Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 days Worst value (a) 15 days","title":"Metric 2: Loan lead time"},{"location":"tutorial-advanced/#metric-3-number-of-the-approved-loans","text":"Definition: The number of approved loans Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 500 Worst value (a) 30","title":"Metric 3: Number of the approved loans"},{"location":"tutorial-advanced/#metric-4-application-screen-time","text":"Definition: The average period of time a user spends using the web application on a daily basis Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 15 min Worst value (a) 1 min","title":"Metric 4: Application screen time"},{"location":"tutorial-advanced/#metric-5-newly-issued-credit-cards","text":"Definition: The number of newly issued credit cards Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 400 pcs. Worst value (a) 100 pcs.","title":"Metric 5: Newly issued credit cards"},{"location":"tutorial-advanced/#assessment-code","text":"assessment \"June Performance Assessment Report - E-bank Group\" { # We define sets of metrics for all three banks metrics E_bank_1 { # Defining the Complaints metric Compl = (3,20,5) New_Credit_Cards = (218,100,400) Screen_Time = (7.4,1,15) New_Loans = (305,30,500) Loan_Lead_Time = (4.43,30,15) } metrics E_bank_2 { Compl = (1,20,5) New_Credit_Cards = (295,100,400) Screen_Time = (4.9,1,15) New_Loans = (352,30,500) Loan_Lead_Time = (8.82,30,15) } metrics E_bank_3 { Compl = (4,20,5) New_Credit_Cards = (191,100,400) Screen_Time = (9.5,1,15) New_Loans = (254,30,500) Loan_Lead_Time = (2.52,30,15) } # Print out the overall grade of all three banks grade cumulative E_bank_1, E_bank_2, E_bank_3; # Individually assess the grades of each bank grade singular E_bank_1, E_bank_2, E_bank_3; # The third bank got the worst grade. # Let us examine why: grade E_bank_3; # The third bank made the worst result for metrics Compl # and New_Credit_Cards. Let us draw them so we # can examine them better: draw metric Compl, New_Credit_Cards from E_bank_3; # At the end, we will compare the overall success # of the first and second bank: grade comparative E_bank_1, E_bank_2; # In order to print all the original metrics data # we can use the following instruction: print E_bank_1, E_bank_2, E_bank_3; }","title":"Assessment code"},{"location":"tutorial-advanced/#what-are-we-going-to-get-from-the-assessment","text":"","title":"What are we going to get from the assessment?"},{"location":"tutorial-advanced/#numerical-result","text":"> Cumulative grade: __________________ Metric sets: {'E_bank_1': {'Compl': 40.0, 'New_Credit_Cards': 39.333, 'Screen_Time': 45.714, 'New_Loans': 58.511, 'Loan_Lead_Time': 70.467}, 'E_bank_2': {'Compl': 80.0, 'New_Credit_Cards': 65.0, 'Screen_Time': 27.857, 'New_Loans': 68.511, 'Loan_Lead_Time': 41.2}, 'E_bank_3': {'Compl': 20.0, 'New_Credit_Cards': 30.333, 'Screen_Time': 60.714, 'New_Loans': 47.66, 'Loan_Lead_Time': 83.2}} Grade: 52/100 points Grade zone: orange > Individual grades: ___________________ Metric set: E_bank_1 Grade: 70/100 points Grade zone: green Metric set: E_bank_2 Grade: 41/100 points Grade zone: orange Metric set: E_bank_3 Grade: 83/100 points Grade zone: green > Leaderboard: ____________________________________ 1. Metric set: ('E_bank_3', 83.2) 2. Metric set: ('E_bank_1', 70.467) 3. Metric set: ('E_bank_2', 41.2) > Metric grade: ______________ Metric set: {'E_bank_3': {'Compl': 20.0, 'New_Credit_Cards': 30.333, 'Screen_Time': 60.714, 'New_Loans': 47.66, 'Loan_Lead_Time': 83.2}} Grade: 48/100 points Grade zone: orange > Drawing metrics: E_bank_3 Compl 20.0 New_Credit_Cards 30.333 > Comparative grade: ___________________ Metric sets: {'E_bank_1': {'Compl': 40.0, 'New_Credit_Cards': 39.333, 'Screen_Time': 45.714, 'New_Loans': 58.511, 'Loan_Lead_Time': 70.467}, 'E_bank_2': {'Compl': 80.0, 'New_Credit_Cards': 65.0, 'Screen_Time': 27.857, 'New_Loans': 68.511, 'Loan_Lead_Time': 41.2}} The metric E_bank_2 has 12% higer grade than the metric E_bank_1. Grades: {'E_bank_1': 51, 'E_bank_2': 57} > Metric sets values: ____________________ Metric: E_bank_1 Values: {'Compl': {'type': 'linear', 'data': {0: 3.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 218.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 7.4, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 305.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 4.43, 1: 30.0, 2: 15.0}}} Metric: E_bank_2 Values: {'Compl': {'type': 'linear', 'data': {0: 1.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 295.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 4.9, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 352.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 8.82, 1: 30.0, 2: 15.0}}} Metric: E_bank_3 Values: {'Compl': {'type': 'linear', 'data': {0: 4.0, 1: 20.0, 2: 5.0}}, 'New_Credit_Cards': {'type': 'linear', 'data': {0: 191.0, 1: 100.0, 2: 400.0}}, 'Screen_Time': {'type': 'linear', 'data': {0: 9.5, 1: 1.0, 2: 15.0}}, 'New_Loans': {'type': 'linear', 'data': {0: 254.0, 1: 30.0, 2: 500.0}}, 'Loan_Lead_Time': {'type': 'linear', 'data': {0: 2.52, 1: 30.0, 2: 15.0}}} > Code successufully executed.","title":"Numerical result"},{"location":"tutorial-advanced/#radar-chart","text":"","title":"Radar chart"},{"location":"tutorial-advanced/#comparative-radar-chart","text":"","title":"Comparative radar chart"},{"location":"tutorial-advanced/#fuzzy-rising-metric-type-1","text":"","title":"Fuzzy rising metric - type 1"},{"location":"tutorial-advanced/#fuzzy-falling-metric-type-2","text":"","title":"Fuzzy falling metric - type 2"},{"location":"tutorial-advanced/#discussion","text":"This documentation paragraph will be available soon.","title":"Discussion"},{"location":"tutorial-intro/","text":"Beginner tutorial Introduction This beginner tutorial will guide you through the basic ITL capabilites. For the sake of demonstration, we will assess the perfomance metrics of the digital product used by a bank. The bank name is going to be E_bank . Of course, when we speak about digital products, it is implied that we speak of e-banking web application. What are we going to measure and assess? We will define three metrics that will be used within this evaluation system. Metrics definitions (monitored on a monthly basis): Metric 1: Number of complaints Definition: The number of users' complaints about the web application performance. Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 Worst value (a) 5 Metric 2: Newly issued credit cards Definition: The number of newly issued credit cards Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 400 pcs. Worst value (a) 100 pcs. Metric 3: Application screen time Definition: The average period of time a user spends using the web application on a daily basis Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 15 min Worst value (a) 1 min Assessment code assessment \"June Performance Assessment Report \u2014 E-Bank\" { # We define sets of metrics for the E-Bank metrics E_Bank { # Defining the Complaints metric Compl = (2,25,5) New_Credit_Cards = (369,100,400) Screen_Time = (7.4,5,15) } # Assess performance of the E-Bank grade E_Bank; } What are we going to get from the assessment? Numerical result > Metric grade: ______________ Metric set: {'E_Bank': {'Compl': 60.0, 'New_Credit_Cards': 89.667, 'Screen_Time': 24.0}} Grade: 58/100 points Grade zone: orange > Code successufully executed. Radar chart Discussion This documentation paragraph will be available soon.","title":"Beginner tutorial"},{"location":"tutorial-intro/#beginner-tutorial","text":"","title":"Beginner tutorial"},{"location":"tutorial-intro/#introduction","text":"This beginner tutorial will guide you through the basic ITL capabilites. For the sake of demonstration, we will assess the perfomance metrics of the digital product used by a bank. The bank name is going to be E_bank . Of course, when we speak about digital products, it is implied that we speak of e-banking web application.","title":"Introduction"},{"location":"tutorial-intro/#what-are-we-going-to-measure-and-assess","text":"We will define three metrics that will be used within this evaluation system. Metrics definitions (monitored on a monthly basis):","title":"What are we going to measure and assess?"},{"location":"tutorial-intro/#metric-1-number-of-complaints","text":"Definition: The number of users' complaints about the web application performance. Metric parameters: Parameter Value Fuzzy type: Type 2 \u2198\ufe0f Ideal value (b) 0 Worst value (a) 5","title":"Metric 1: Number of complaints"},{"location":"tutorial-intro/#metric-2-newly-issued-credit-cards","text":"Definition: The number of newly issued credit cards Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 400 pcs. Worst value (a) 100 pcs.","title":"Metric 2: Newly issued credit cards"},{"location":"tutorial-intro/#metric-3-application-screen-time","text":"Definition: The average period of time a user spends using the web application on a daily basis Metric parameters: Parameter Value Fuzzy type: Type 1 \u2197\ufe0f Ideal value (b) 15 min Worst value (a) 1 min","title":"Metric 3: Application screen time"},{"location":"tutorial-intro/#assessment-code","text":"assessment \"June Performance Assessment Report \u2014 E-Bank\" { # We define sets of metrics for the E-Bank metrics E_Bank { # Defining the Complaints metric Compl = (2,25,5) New_Credit_Cards = (369,100,400) Screen_Time = (7.4,5,15) } # Assess performance of the E-Bank grade E_Bank; }","title":"Assessment code"},{"location":"tutorial-intro/#what-are-we-going-to-get-from-the-assessment","text":"","title":"What are we going to get from the assessment?"},{"location":"tutorial-intro/#numerical-result","text":"> Metric grade: ______________ Metric set: {'E_Bank': {'Compl': 60.0, 'New_Credit_Cards': 89.667, 'Screen_Time': 24.0}} Grade: 58/100 points Grade zone: orange > Code successufully executed.","title":"Numerical result"},{"location":"tutorial-intro/#radar-chart","text":"","title":"Radar chart"},{"location":"tutorial-intro/#discussion","text":"This documentation paragraph will be available soon.","title":"Discussion"},{"location":"tutorial-multirepo/","text":"Multiple reports creating Introduction This documentation paragraph will be available soon. Assessment code assessment \"First report 1\" { metrics first_1 { first1 = (1,1,1) } metrics first_2 { first2 = triangle(3,2,4,6) } print first_1,first_2; make excel report \"First report\"; } assessment \"Second report 2\" { metrics second_1 { second1 = sigmoid(3,4,5) } metrics second_2 { second2 = (100,200,369) } print second_1,second_2; make excel report \"Second report\"; } What are we going to get from the assessments? Generated reports Created reports can be downloaded from here. Numerical result > Metric sets values: ____________________ Metric: first_1 Values: {'first1': {'type': 'linear', 'data': {0: Token(NUMBER, '1'), 1: Token(NUMBER, '1'), 2: Token(NUMBER, '1')}}} Metric: first_2 Values: {'first2': {'type': 'triangle', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '2'), 2: Token(NUMBER, '4'), 3: Token(NUMBER, '6')}}} > Metric sets values: ____________________ Metric: second_1 Values: {'second1': {'type': 'sigmoid', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '4'), 2: Token(NUMBER, '5')}}} Metric: second_2 Values: {'second2': {'type': 'linear', 'data': {0: Token(NUMBER, '100'), 1: Token(NUMBER, '200'), 2: Token(NUMBER, '369')}}} > Code successufully executed.","title":"Multiple reports creating"},{"location":"tutorial-multirepo/#multiple-reports-creating","text":"","title":"Multiple reports creating"},{"location":"tutorial-multirepo/#introduction","text":"This documentation paragraph will be available soon.","title":"Introduction"},{"location":"tutorial-multirepo/#assessment-code","text":"assessment \"First report 1\" { metrics first_1 { first1 = (1,1,1) } metrics first_2 { first2 = triangle(3,2,4,6) } print first_1,first_2; make excel report \"First report\"; } assessment \"Second report 2\" { metrics second_1 { second1 = sigmoid(3,4,5) } metrics second_2 { second2 = (100,200,369) } print second_1,second_2; make excel report \"Second report\"; }","title":"Assessment code"},{"location":"tutorial-multirepo/#what-are-we-going-to-get-from-the-assessments","text":"","title":"What are we going to get from the assessments?"},{"location":"tutorial-multirepo/#generated-reports","text":"Created reports can be downloaded from here.","title":"Generated reports"},{"location":"tutorial-multirepo/#numerical-result","text":"> Metric sets values: ____________________ Metric: first_1 Values: {'first1': {'type': 'linear', 'data': {0: Token(NUMBER, '1'), 1: Token(NUMBER, '1'), 2: Token(NUMBER, '1')}}} Metric: first_2 Values: {'first2': {'type': 'triangle', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '2'), 2: Token(NUMBER, '4'), 3: Token(NUMBER, '6')}}} > Metric sets values: ____________________ Metric: second_1 Values: {'second1': {'type': 'sigmoid', 'data': {0: Token(NUMBER, '3'), 1: Token(NUMBER, '4'), 2: Token(NUMBER, '5')}}} Metric: second_2 Values: {'second2': {'type': 'linear', 'data': {0: Token(NUMBER, '100'), 1: Token(NUMBER, '200'), 2: Token(NUMBER, '369')}}} > Code successufully executed.","title":"Numerical result"}]}